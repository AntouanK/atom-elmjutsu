var _user$project$Sidekick$isExposed = F2(
	function (name, exposed) {
		var _p0 = exposed;
		switch (_p0.ctor) {
			case 'None':
				return false;
			case 'Some':
				return A2(_elm_lang$core$Set$member, name, _p0._0);
			default:
				return true;
		}
	});
var _user$project$Sidekick$tipeToValue = function (_p1) {
	var _p2 = _p1;
	return {name: _p2.name, comment: _p2.comment, tipe: _p2.tipe};
};
var _user$project$Sidekick$dotToHyphen = function (string) {
	return A2(
		_elm_lang$core$String$map,
		function (c) {
			return _elm_lang$core$Native_Utils.eq(
				c,
				_elm_lang$core$Native_Utils.chr('.')) ? _elm_lang$core$Native_Utils.chr('-') : c;
		},
		string);
};
var _user$project$Sidekick$urlTo = F2(
	function (_p3, valueName) {
		var _p4 = _p3;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'http://package.elm-lang.org/packages/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p4.pkg,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/latest/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Sidekick$dotToHyphen(_p4.name),
						A2(_elm_lang$core$Basics_ops['++'], '#', valueName)))));
	});
var _user$project$Sidekick$viewHint = function (hint) {
	var formatName = function (name) {
		return A2(
			_elm_lang$core$Regex$contains,
			_elm_lang$core$Regex$regex('\\w'),
			name) ? name : A2(
			_elm_lang$core$Basics_ops['++'],
			'(',
			A2(_elm_lang$core$Basics_ops['++'], name, ')'));
	};
	var _p5 = function () {
		var _p6 = A2(_elm_lang$core$String$split, '.', hint.name);
		if (_p6.ctor === '[]') {
			return {ctor: '_Tuple2', _0: '', _1: hint.name};
		} else {
			var reversed = _elm_lang$core$List$reverse(_p6);
			var name = function () {
				var _p7 = _elm_lang$core$List$head(reversed);
				if (_p7.ctor === 'Just') {
					return _p7._0;
				} else {
					return '';
				}
			}();
			var pkg = A2(
				_elm_lang$core$String$join,
				'.',
				_elm_lang$core$List$reverse(
					A2(_elm_lang$core$List$drop, 1, reversed)));
			return {ctor: '_Tuple2', _0: pkg, _1: name};
		}
	}();
	var pkg = _p5._0;
	var name = _p5._1;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'# ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			pkg,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'.**',
				A2(
					_elm_lang$core$Basics_ops['++'],
					name,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'**\n',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'## **',
							A2(
								_elm_lang$core$Basics_ops['++'],
								formatName(name),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'** : ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										hint.tipe,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'<br><br>\n',
											A2(
												_elm_lang$core$Basics_ops['++'],
												hint.comment,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'<br><br>\n',
													A2(
														_elm_lang$core$Basics_ops['++'],
														'[View in browser](',
														A2(_elm_lang$core$Basics_ops['++'], hint.href, ')'))))))))))))));
};
var _user$project$Sidekick$viewHintString = function (hints) {
	var _p8 = hints;
	if (_p8.ctor === '[]') {
		return '';
	} else {
		return A2(
			_elm_lang$core$String$join,
			'\n\n',
			A2(_elm_lang$core$List$map, _user$project$Sidekick$viewHint, hints));
	}
};
var _user$project$Sidekick$view = function (_p9) {
	var _p10 = _p9;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(_p10.note),
				A2(
				_evancz$elm_markdown$Markdown$toHtml,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_user$project$Sidekick$viewHintString(_p10.hints))
			]));
};
var _user$project$Sidekick$tokens = _elm_lang$core$Native_Platform.incomingPort(
	'tokens',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
			])));
var _user$project$Sidekick$rawImports = _elm_lang$core$Native_Platform.incomingPort(
	'rawImports',
	_elm_lang$core$Json_Decode$list(
		A2(
			_elm_lang$core$Json_Decode$andThen,
			A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
			function (name) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(
						_elm_lang$core$Json_Decode_ops[':='],
						'alias',
						_elm_lang$core$Json_Decode$oneOf(
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
									A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
								]))),
					function (alias) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							A2(
								_elm_lang$core$Json_Decode_ops[':='],
								'exposed',
								_elm_lang$core$Json_Decode$oneOf(
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
											A2(
											_elm_lang$core$Json_Decode$map,
											_elm_lang$core$Maybe$Just,
											_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))
										]))),
							function (exposed) {
								return _elm_lang$core$Json_Decode$succeed(
									{name: name, alias: alias, exposed: exposed});
							});
					});
			})));
var _user$project$Sidekick$docsLoaded = _elm_lang$core$Native_Platform.outgoingPort(
	'docsLoaded',
	function (v) {
		return null;
	});
var _user$project$Sidekick$Model = F5(
	function (a, b, c, d, e) {
		return {docs: a, imports: b, tokens: c, hints: d, note: e};
	});
var _user$project$Sidekick$ModuleDocs = F3(
	function (a, b, c) {
		return {pkg: a, name: b, values: c};
	});
var _user$project$Sidekick$Values = F3(
	function (a, b, c) {
		return {aliases: a, types: b, values: c};
	});
var _user$project$Sidekick$Tipe = F4(
	function (a, b, c, d) {
		return {name: a, comment: b, tipe: c, cases: d};
	});
var _user$project$Sidekick$Value = F3(
	function (a, b, c) {
		return {name: a, comment: b, tipe: c};
	});
var _user$project$Sidekick$moduleDecoder = function (pkg) {
	var value = A4(
		_elm_lang$core$Json_Decode$object3,
		_user$project$Sidekick$Value,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'type', _elm_lang$core$Json_Decode$string));
	var tipe = A5(
		_elm_lang$core$Json_Decode$object4,
		_user$project$Sidekick$Tipe,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'cases',
			_elm_lang$core$Json_Decode$list(
				A3(_elm_lang$core$Json_Decode$tuple2, _elm_lang$core$Basics$always, _elm_lang$core$Json_Decode$string, _elm_lang$core$Json_Decode$value))));
	var values = A4(
		_elm_lang$core$Json_Decode$object3,
		_user$project$Sidekick$Values,
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'aliases',
			_elm_lang$core$Json_Decode$list(value)),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'types',
			_elm_lang$core$Json_Decode$list(tipe)),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'values',
			_elm_lang$core$Json_Decode$list(value)));
	var name = A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string);
	return A3(
		_elm_lang$core$Json_Decode$object2,
		_user$project$Sidekick$ModuleDocs(pkg),
		name,
		values);
};
var _user$project$Sidekick$getDocs = function (pkg) {
	var url = A2(
		_elm_lang$core$Basics_ops['++'],
		'http://package.elm-lang.org/packages/',
		A2(_elm_lang$core$Basics_ops['++'], pkg, '/latest/documentation.json'));
	return A2(
		_evancz$elm_http$Http$get,
		_elm_lang$core$Json_Decode$list(
			_user$project$Sidekick$moduleDecoder(pkg)),
		url);
};
var _user$project$Sidekick$getAllDocs = function () {
	var supportedPackages = _elm_lang$core$Native_List.fromArray(
		['elm-lang/core', 'elm-lang/html', 'elm-lang/svg', 'evancz/elm-markdown', 'evancz/elm-http']);
	return A2(
		_elm_lang$core$Task$map,
		_elm_lang$core$List$concat,
		_elm_lang$core$Task$sequence(
			A2(_elm_lang$core$List$map, _user$project$Sidekick$getDocs, supportedPackages)));
}();
var _user$project$Sidekick$Hint = F4(
	function (a, b, c, d) {
		return {name: a, href: b, comment: c, tipe: d};
	});
var _user$project$Sidekick$nameToHints = F3(
	function (moduleDocs, _p12, _p11) {
		var _p13 = _p12;
		var _p14 = _p11;
		var _p15 = _p14.name;
		var localName = A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$Maybe$withDefault, moduleDocs.name, _p13.alias),
			A2(_elm_lang$core$Basics_ops['++'], '.', _p15));
		var fullName = A2(
			_elm_lang$core$Basics_ops['++'],
			moduleDocs.name,
			A2(_elm_lang$core$Basics_ops['++'], '.', _p15));
		var hint = A4(
			_user$project$Sidekick$Hint,
			fullName,
			A2(_user$project$Sidekick$urlTo, moduleDocs, _p15),
			_p14.comment,
			_p14.tipe);
		return A2(_user$project$Sidekick$isExposed, _p15, _p13.exposed) ? _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: _p15, _1: hint},
				{ctor: '_Tuple2', _0: localName, _1: hint}
			]) : _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: localName, _1: hint}
			]);
	});
var _user$project$Sidekick$unionTagsToHints = F2(
	function (moduleDocs, _p16) {
		var _p17 = _p16;
		var addHints = F2(
			function (tag, hints) {
				var fullName = A2(
					_elm_lang$core$Basics_ops['++'],
					moduleDocs.name,
					A2(_elm_lang$core$Basics_ops['++'], '.', tag));
				var hint = A4(
					_user$project$Sidekick$Hint,
					fullName,
					A2(_user$project$Sidekick$urlTo, moduleDocs, _p17.name),
					_p17.comment,
					_p17.tipe);
				return A2(
					_elm_lang$core$List_ops['::'],
					{ctor: '_Tuple2', _0: tag, _1: hint},
					A2(
						_elm_lang$core$List_ops['::'],
						{ctor: '_Tuple2', _0: fullName, _1: hint},
						hints));
			});
		return A3(
			_elm_lang$core$List$foldl,
			addHints,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_p17.cases);
	});
var _user$project$Sidekick$filteredHints = F2(
	function (moduleDocs, importData) {
		var allNames = A2(
			_elm_lang$core$Basics_ops['++'],
			moduleDocs.values.aliases,
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$List$map, _user$project$Sidekick$tipeToValue, moduleDocs.values.types),
				moduleDocs.values.values));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$concatMap,
				_user$project$Sidekick$unionTagsToHints(moduleDocs),
				moduleDocs.values.types),
			A2(
				_elm_lang$core$List$concatMap,
				A2(_user$project$Sidekick$nameToHints, moduleDocs, importData),
				allNames));
	});
var _user$project$Sidekick$toTokenDict = F2(
	function (imports, moduleList) {
		var insert = F2(
			function (_p18, dict) {
				var _p19 = _p18;
				return A3(
					_elm_lang$core$Dict$update,
					_p19._0,
					function (value) {
						return _elm_lang$core$Maybe$Just(
							A2(
								_elm_lang$core$List_ops['::'],
								_p19._1,
								A2(
									_elm_lang$core$Maybe$withDefault,
									_elm_lang$core$Native_List.fromArray(
										[]),
									value)));
					},
					dict);
			});
		var getMaybeHints = function (moduleDocs) {
			return A2(
				_elm_lang$core$Maybe$map,
				_user$project$Sidekick$filteredHints(moduleDocs),
				A2(_elm_lang$core$Dict$get, moduleDocs.name, imports));
		};
		return A3(
			_elm_lang$core$List$foldl,
			insert,
			_elm_lang$core$Dict$empty,
			_elm_lang$core$List$concat(
				A2(_elm_lang$core$List$filterMap, getMaybeHints, moduleList)));
	});
var _user$project$Sidekick$update = F2(
	function (msg, model) {
		var _p20 = msg;
		switch (_p20.ctor) {
			case 'DocsFailed':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'DocsLoaded':
				var newDocs = A2(_elm_lang$core$Basics_ops['++'], _p20._0, model.docs);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							docs: newDocs,
							tokens: A2(_user$project$Sidekick$toTokenDict, model.imports, newDocs),
							note: ''
						}),
					_1: _user$project$Sidekick$docsLoaded(
						{ctor: '_Tuple0'})
				};
			case 'UpdateImports':
				var _p21 = _p20._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							imports: _p21,
							tokens: A2(_user$project$Sidekick$toTokenDict, _p21, model.docs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				if (_p20._0.ctor === 'Nothing') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								hints: _elm_lang$core$Native_List.fromArray(
									[])
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								hints: A2(
									_elm_lang$core$Maybe$withDefault,
									_elm_lang$core$Native_List.fromArray(
										[]),
									A2(_elm_lang$core$Dict$get, _p20._0._0, model.tokens))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$Sidekick$RawImport = F3(
	function (a, b, c) {
		return {name: a, alias: b, exposed: c};
	});
var _user$project$Sidekick$Import = F2(
	function (a, b) {
		return {alias: a, exposed: b};
	});
var _user$project$Sidekick_ops = _user$project$Sidekick_ops || {};
_user$project$Sidekick_ops['=>'] = F2(
	function (name, exposed) {
		return {
			ctor: '_Tuple2',
			_0: name,
			_1: A2(_user$project$Sidekick$Import, _elm_lang$core$Maybe$Nothing, exposed)
		};
	});
var _user$project$Sidekick$CursorMove = function (a) {
	return {ctor: 'CursorMove', _0: a};
};
var _user$project$Sidekick$UpdateImports = function (a) {
	return {ctor: 'UpdateImports', _0: a};
};
var _user$project$Sidekick$DocsLoaded = function (a) {
	return {ctor: 'DocsLoaded', _0: a};
};
var _user$project$Sidekick$DocsFailed = {ctor: 'DocsFailed'};
var _user$project$Sidekick$All = {ctor: 'All'};
var _user$project$Sidekick$Some = function (a) {
	return {ctor: 'Some', _0: a};
};
var _user$project$Sidekick$None = {ctor: 'None'};
var _user$project$Sidekick$toImport = function (_p22) {
	var _p23 = _p22;
	var exposedSet = function () {
		var _p24 = _p23.exposed;
		if (_p24.ctor === 'Nothing') {
			return _user$project$Sidekick$None;
		} else {
			if (((_p24._0.ctor === '::') && (_p24._0._0 === '..')) && (_p24._0._1.ctor === '[]')) {
				return _user$project$Sidekick$All;
			} else {
				return _user$project$Sidekick$Some(
					_elm_lang$core$Set$fromList(_p24._0));
			}
		}
	}();
	return {
		ctor: '_Tuple2',
		_0: _p23.name,
		_1: A2(_user$project$Sidekick$Import, _p23.alias, exposedSet)
	};
};
var _user$project$Sidekick$defaultImports = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Sidekick_ops['=>'], 'Basics', _user$project$Sidekick$All),
			A2(_user$project$Sidekick_ops['=>'], 'Debug', _user$project$Sidekick$None),
			A2(
			_user$project$Sidekick_ops['=>'],
			'List',
			_user$project$Sidekick$Some(
				_elm_lang$core$Set$fromList(
					_elm_lang$core$Native_List.fromArray(
						['List', '::'])))),
			A2(
			_user$project$Sidekick_ops['=>'],
			'Maybe',
			_user$project$Sidekick$Some(
				_elm_lang$core$Set$singleton('Maybe'))),
			A2(
			_user$project$Sidekick_ops['=>'],
			'Result',
			_user$project$Sidekick$Some(
				_elm_lang$core$Set$singleton('Result'))),
			A2(
			_user$project$Sidekick_ops['=>'],
			'Platform',
			_user$project$Sidekick$Some(
				_elm_lang$core$Set$singleton('Program'))),
			{
			ctor: '_Tuple2',
			_0: 'Platform.Cmd',
			_1: A2(
				_user$project$Sidekick$Import,
				_elm_lang$core$Maybe$Just('Cmd'),
				_user$project$Sidekick$Some(
					_elm_lang$core$Set$fromList(
						_elm_lang$core$Native_List.fromArray(
							['Cmd', '!']))))
		},
			{
			ctor: '_Tuple2',
			_0: 'Platform.Sub',
			_1: A2(
				_user$project$Sidekick$Import,
				_elm_lang$core$Maybe$Just('Sub'),
				_user$project$Sidekick$Some(
					_elm_lang$core$Set$singleton('Sub')))
		}
		]));
var _user$project$Sidekick$emptyModel = {
	docs: _elm_lang$core$Native_List.fromArray(
		[]),
	imports: _user$project$Sidekick$defaultImports,
	tokens: _elm_lang$core$Dict$empty,
	hints: _elm_lang$core$Native_List.fromArray(
		[]),
	note: 'Loading...'
};
var _user$project$Sidekick$init = {
	ctor: '_Tuple2',
	_0: _user$project$Sidekick$emptyModel,
	_1: A3(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$always(_user$project$Sidekick$DocsFailed),
		_user$project$Sidekick$DocsLoaded,
		_user$project$Sidekick$getAllDocs)
};
var _user$project$Sidekick$toImportDict = function (rawImportList) {
	return A2(
		_elm_lang$core$Dict$union,
		_elm_lang$core$Dict$fromList(
			A2(_elm_lang$core$List$map, _user$project$Sidekick$toImport, rawImportList)),
		_user$project$Sidekick$defaultImports);
};
var _user$project$Sidekick$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Sidekick$tokens(_user$project$Sidekick$CursorMove),
				_user$project$Sidekick$rawImports(
				function (raw) {
					return _user$project$Sidekick$UpdateImports(
						_user$project$Sidekick$toImportDict(raw));
				})
			]));
};
var _user$project$Sidekick$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Sidekick$init, view: _user$project$Sidekick$view, update: _user$project$Sidekick$update, subscriptions: _user$project$Sidekick$subscriptions})
};
