var _user$project$Sidekick$packageDocsPrefix = 'http://package.elm-lang.org/packages/';
var _user$project$Sidekick$viewHint = F2(
	function (activeFilePath, hint) {
		var formattedComment = function () {
			var _p0 = hint.comment;
			if (_p0 === '') {
				return '';
			} else {
				return A2(_elm_lang$core$Basics_ops['++'], '\n<br>', hint.comment);
			}
		}();
		var formattedTipe = A2(_elm_lang$core$String$startsWith, '*', hint.tipe) ? hint.tipe : (_elm_lang$core$Native_Utils.eq(hint.tipe, '') ? '' : A2(_elm_lang$core$Basics_ops['++'], ': ', hint.tipe));
		var formattedModuleName = (_elm_lang$core$Native_Utils.eq(hint.moduleName, '') || _elm_lang$core$Native_Utils.eq(
			activeFilePath,
			_elm_lang$core$Maybe$Just(hint.sourcePath))) ? '' : A2(_elm_lang$core$Basics_ops['++'], hint.moduleName, '.');
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'##### ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				formattedModuleName,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'**',
					A2(
						_elm_lang$core$Basics_ops['++'],
						hint.name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'** ',
							A2(_elm_lang$core$Basics_ops['++'], formattedTipe, formattedComment))))));
	});
var _user$project$Sidekick$view = function (_p1) {
	var _p2 = _p1;
	var sourceView = function (hint) {
		return A2(_elm_lang$core$String$startsWith, _user$project$Sidekick$packageDocsPrefix, hint.sourcePath) ? _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$title(hint.sourcePath),
						_elm_lang$html$Html_Attributes$href(hint.sourcePath)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('View in browser')
					]))
			]) : _elm_lang$core$Native_List.fromArray(
			[]);
	};
	var hintMarkdown = function (hint) {
		return A2(
			_evancz$elm_markdown$Markdown$toHtml,
			_elm_lang$core$Native_List.fromArray(
				[]),
			A2(_user$project$Sidekick$viewHint, _p2.activeFilePath, hint));
	};
	var hintsView = A2(
		_elm_lang$core$List$map,
		function (hint) {
			return A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Native_List.fromArray(
						[
							hintMarkdown(hint)
						]),
					sourceView(hint)));
		},
		_p2.activeHints);
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(_p2.note)
				]),
			hintsView));
};
var _user$project$Sidekick$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'ActiveHintsChanged':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{activeHints: _p3._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ActiveFilePathChanged':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{activeFilePath: _p3._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DocsLoaded':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{note: ''}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DocsFailed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{note: 'Failed to load package docs. (•́︿•̀)'}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{note: 'Loading package docs...'}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Sidekick$emptyModel = {
	note: '',
	activeHints: _elm_lang$core$Native_List.fromArray(
		[]),
	activeFilePath: _elm_lang$core$Maybe$Nothing
};
var _user$project$Sidekick$init = {ctor: '_Tuple2', _0: _user$project$Sidekick$emptyModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Sidekick$activeHintsChangedSub = _elm_lang$core$Native_Platform.incomingPort(
	'activeHintsChangedSub',
	_elm_lang$core$Json_Decode$list(
		A2(
			_elm_lang$core$Json_Decode$andThen,
			A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
			function (name) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(_elm_lang$core$Json_Decode_ops[':='], 'moduleName', _elm_lang$core$Json_Decode$string),
					function (moduleName) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							A2(_elm_lang$core$Json_Decode_ops[':='], 'sourcePath', _elm_lang$core$Json_Decode$string),
							function (sourcePath) {
								return A2(
									_elm_lang$core$Json_Decode$andThen,
									A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
									function (comment) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											A2(_elm_lang$core$Json_Decode_ops[':='], 'tipe', _elm_lang$core$Json_Decode$string),
											function (tipe) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													A2(
														_elm_lang$core$Json_Decode_ops[':='],
														'caseTipe',
														_elm_lang$core$Json_Decode$oneOf(
															_elm_lang$core$Native_List.fromArray(
																[
																	_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																	A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
																]))),
													function (caseTipe) {
														return _elm_lang$core$Json_Decode$succeed(
															{name: name, moduleName: moduleName, sourcePath: sourcePath, comment: comment, tipe: tipe, caseTipe: caseTipe});
													});
											});
									});
							});
					});
			})));
var _user$project$Sidekick$activeFilePathChangedSub = _elm_lang$core$Native_Platform.incomingPort(
	'activeFilePathChangedSub',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
			])));
var _user$project$Sidekick$docsLoadedSub = _elm_lang$core$Native_Platform.incomingPort(
	'docsLoadedSub',
	_elm_lang$core$Json_Decode$null(
		{ctor: '_Tuple0'}));
var _user$project$Sidekick$docsFailedSub = _elm_lang$core$Native_Platform.incomingPort(
	'docsFailedSub',
	_elm_lang$core$Json_Decode$null(
		{ctor: '_Tuple0'}));
var _user$project$Sidekick$updatingPackageDocsSub = _elm_lang$core$Native_Platform.incomingPort(
	'updatingPackageDocsSub',
	_elm_lang$core$Json_Decode$null(
		{ctor: '_Tuple0'}));
var _user$project$Sidekick$goToDefinitionCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'goToDefinitionCmd',
	function (v) {
		return v;
	});
var _user$project$Sidekick$Model = F3(
	function (a, b, c) {
		return {note: a, activeHints: b, activeFilePath: c};
	});
var _user$project$Sidekick$ActiveHint = F6(
	function (a, b, c, d, e, f) {
		return {name: a, moduleName: b, sourcePath: c, comment: d, tipe: e, caseTipe: f};
	});
var _user$project$Sidekick$Hint = F6(
	function (a, b, c, d, e, f) {
		return {name: a, moduleName: b, sourcePath: c, comment: d, tipe: e, caseTipe: f};
	});
var _user$project$Sidekick$UpdatingPackageDocs = {ctor: 'UpdatingPackageDocs'};
var _user$project$Sidekick$DocsFailed = {ctor: 'DocsFailed'};
var _user$project$Sidekick$DocsLoaded = {ctor: 'DocsLoaded'};
var _user$project$Sidekick$ActiveFilePathChanged = function (a) {
	return {ctor: 'ActiveFilePathChanged', _0: a};
};
var _user$project$Sidekick$ActiveHintsChanged = function (a) {
	return {ctor: 'ActiveHintsChanged', _0: a};
};
var _user$project$Sidekick$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Sidekick$activeHintsChangedSub(_user$project$Sidekick$ActiveHintsChanged),
				_user$project$Sidekick$activeFilePathChangedSub(_user$project$Sidekick$ActiveFilePathChanged),
				_user$project$Sidekick$docsLoadedSub(
				function (_p4) {
					return _user$project$Sidekick$DocsLoaded;
				}),
				_user$project$Sidekick$docsFailedSub(
				function (_p5) {
					return _user$project$Sidekick$DocsFailed;
				}),
				_user$project$Sidekick$updatingPackageDocsSub(
				function (_p6) {
					return _user$project$Sidekick$UpdatingPackageDocs;
				})
			]));
};
var _user$project$Sidekick$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Sidekick$init, view: _user$project$Sidekick$view, update: _user$project$Sidekick$update, subscriptions: _user$project$Sidekick$subscriptions})
};
