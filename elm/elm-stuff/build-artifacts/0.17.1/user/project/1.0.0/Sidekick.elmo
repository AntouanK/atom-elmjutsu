var _user$project$Sidekick$defaultTypes = _elm_lang$core$Native_List.fromArray(
	['Maybe', 'Result']);
var _user$project$Sidekick$isExposed = F2(
	function (name, exposed) {
		var _p0 = exposed;
		switch (_p0.ctor) {
			case 'None':
				return false;
			case 'Some':
				return A2(_elm_lang$core$Set$member, name, _p0._0);
			default:
				return true;
		}
	});
var _user$project$Sidekick$tipeToValue = function (_p1) {
	var _p2 = _p1;
	return {name: _p2.name, comment: _p2.comment, tipe: _p2.tipe};
};
var _user$project$Sidekick$packageDocsPrefix = 'http://package.elm-lang.org/packages/';
var _user$project$Sidekick$toPackageUri = function ($package) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Sidekick$packageDocsPrefix,
		A2(_elm_lang$core$Basics_ops['++'], $package, '/latest/'));
};
var _user$project$Sidekick$defaultPackages = A2(
	_elm_lang$core$List$map,
	_user$project$Sidekick$toPackageUri,
	_elm_lang$core$Native_List.fromArray(
		['elm-lang/core']));
var _user$project$Sidekick$dotToHyphen = function (string) {
	return A2(
		_elm_lang$core$String$map,
		function (c) {
			return _elm_lang$core$Native_Utils.eq(
				c,
				_elm_lang$core$Native_Utils.chr('.')) ? _elm_lang$core$Native_Utils.chr('-') : c;
		},
		string);
};
var _user$project$Sidekick$urlTo = F2(
	function (_p3, valueName) {
		var _p4 = _p3;
		var _p5 = _p4.packageUri;
		var uri = A2(_elm_lang$core$String$startsWith, _user$project$Sidekick$packageDocsPrefix, _p5) ? A2(
			_elm_lang$core$Basics_ops['++'],
			_p5,
			_user$project$Sidekick$dotToHyphen(_p4.name)) : _p5;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			uri,
			A2(_elm_lang$core$Basics_ops['++'], '#', valueName));
	});
var _user$project$Sidekick$viewHint = F2(
	function (activeModuleName, hint) {
		var formatTipe = function (tipe) {
			return A2(_elm_lang$core$String$startsWith, '*', tipe) ? tipe : (_elm_lang$core$Native_Utils.eq(tipe, '') ? '' : A2(_elm_lang$core$Basics_ops['++'], ': ', tipe));
		};
		var formatName = function (name) {
			return A2(
				_elm_lang$core$Regex$contains,
				_elm_lang$core$Regex$regex('\\w'),
				name) ? name : A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(_elm_lang$core$Basics_ops['++'], name, ')'));
		};
		var formatModule = function (moduleName) {
			return _elm_lang$core$Native_Utils.eq(activeModuleName, moduleName) ? A2(_elm_lang$core$Basics_ops['++'], moduleName, '.') : A2(_elm_lang$core$Basics_ops['++'], moduleName, '.');
		};
		var _p6 = function () {
			var _p7 = A2(_elm_lang$core$String$split, '.', hint.name);
			if (_p7.ctor === '[]') {
				return {ctor: '_Tuple2', _0: '', _1: hint.name};
			} else {
				var reversed = _elm_lang$core$List$reverse(_p7);
				var name = function () {
					var _p8 = _elm_lang$core$List$head(reversed);
					if (_p8.ctor === 'Just') {
						return _p8._0;
					} else {
						return '';
					}
				}();
				var moduleName = A2(
					_elm_lang$core$String$join,
					'.',
					_elm_lang$core$List$reverse(
						A2(_elm_lang$core$List$drop, 1, reversed)));
				return {ctor: '_Tuple2', _0: moduleName, _1: name};
			}
		}();
		var moduleName = _p6._0;
		var name = _p6._1;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'# ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				formatModule(moduleName),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'**',
					A2(
						_elm_lang$core$Basics_ops['++'],
						name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'**\n',
							A2(
								_elm_lang$core$Basics_ops['++'],
								'## **',
								A2(
									_elm_lang$core$Basics_ops['++'],
									formatName(name),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'** ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											formatTipe(hint.tipe),
											A2(
												_elm_lang$core$Basics_ops['++'],
												'<br><br>\n',
												A2(_elm_lang$core$Basics_ops['++'], hint.comment, '<br><br>\n')))))))))));
	});
var _user$project$Sidekick$emptyModuleDocs = {
	packageUri: '',
	name: '',
	values: {
		aliases: _elm_lang$core$Native_List.fromArray(
			[]),
		types: _elm_lang$core$Native_List.fromArray(
			[]),
		values: _elm_lang$core$Native_List.fromArray(
			[])
	}
};
var _user$project$Sidekick$emptyModel = {
	packageDocs: _elm_lang$core$Native_List.fromArray(
		[]),
	tokens: _elm_lang$core$Dict$empty,
	hints: _elm_lang$core$Native_List.fromArray(
		[]),
	note: 'Loading...',
	activeFilePath: _elm_lang$core$Maybe$Nothing,
	sourceFileDict: _elm_lang$core$Dict$empty
};
var _user$project$Sidekick$activeTokenChanged = _elm_lang$core$Native_Platform.incomingPort(
	'activeTokenChanged',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
			])));
var _user$project$Sidekick$activeFilePathChanged = _elm_lang$core$Native_Platform.incomingPort(
	'activeFilePathChanged',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
			])));
var _user$project$Sidekick$sourceFileChanged = _elm_lang$core$Native_Platform.incomingPort(
	'sourceFileChanged',
	A4(
		_elm_lang$core$Json_Decode$tuple3,
		F3(
			function (x1, x2, x3) {
				return {ctor: '_Tuple3', _0: x1, _1: x2, _2: x3};
			}),
		_elm_lang$core$Json_Decode$string,
		A2(
			_elm_lang$core$Json_Decode$andThen,
			A2(_elm_lang$core$Json_Decode_ops[':='], 'packageUri', _elm_lang$core$Json_Decode$string),
			function (packageUri) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
					function (name) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							A2(
								_elm_lang$core$Json_Decode_ops[':='],
								'values',
								A2(
									_elm_lang$core$Json_Decode$andThen,
									A2(
										_elm_lang$core$Json_Decode_ops[':='],
										'aliases',
										_elm_lang$core$Json_Decode$list(
											A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
												function (name) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
														function (comment) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'tipe', _elm_lang$core$Json_Decode$string),
																function (tipe) {
																	return _elm_lang$core$Json_Decode$succeed(
																		{name: name, comment: comment, tipe: tipe});
																});
														});
												}))),
									function (aliases) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											A2(
												_elm_lang$core$Json_Decode_ops[':='],
												'types',
												_elm_lang$core$Json_Decode$list(
													A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
														function (name) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
																function (comment) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		A2(_elm_lang$core$Json_Decode_ops[':='], 'tipe', _elm_lang$core$Json_Decode$string),
																		function (tipe) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				A2(
																					_elm_lang$core$Json_Decode_ops[':='],
																					'cases',
																					_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
																				function (cases) {
																					return _elm_lang$core$Json_Decode$succeed(
																						{name: name, comment: comment, tipe: tipe, cases: cases});
																				});
																		});
																});
														}))),
											function (types) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													A2(
														_elm_lang$core$Json_Decode_ops[':='],
														'values',
														_elm_lang$core$Json_Decode$list(
															A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
																function (name) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
																		function (comment) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				A2(_elm_lang$core$Json_Decode_ops[':='], 'tipe', _elm_lang$core$Json_Decode$string),
																				function (tipe) {
																					return _elm_lang$core$Json_Decode$succeed(
																						{name: name, comment: comment, tipe: tipe});
																				});
																		});
																}))),
													function (values) {
														return _elm_lang$core$Json_Decode$succeed(
															{aliases: aliases, types: types, values: values});
													});
											});
									})),
							function (values) {
								return _elm_lang$core$Json_Decode$succeed(
									{packageUri: packageUri, name: name, values: values});
							});
					});
			}),
		_elm_lang$core$Json_Decode$list(
			A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
				function (name) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'alias',
							_elm_lang$core$Json_Decode$oneOf(
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
										A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
									]))),
						function (alias) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(
									_elm_lang$core$Json_Decode_ops[':='],
									'exposed',
									_elm_lang$core$Json_Decode$oneOf(
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
												A2(
												_elm_lang$core$Json_Decode$map,
												_elm_lang$core$Maybe$Just,
												_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))
											]))),
								function (exposed) {
									return _elm_lang$core$Json_Decode$succeed(
										{name: name, alias: alias, exposed: exposed});
								});
						});
				}))));
var _user$project$Sidekick$newPackagesNeeded = _elm_lang$core$Native_Platform.incomingPort(
	'newPackagesNeeded',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
var _user$project$Sidekick$docsLoaded = _elm_lang$core$Native_Platform.outgoingPort(
	'docsLoaded',
	function (v) {
		return null;
	});
var _user$project$Sidekick$goToDefinition = _elm_lang$core$Native_Platform.outgoingPort(
	'goToDefinition',
	function (v) {
		return v;
	});
var _user$project$Sidekick$Model = F6(
	function (a, b, c, d, e, f) {
		return {packageDocs: a, tokens: b, hints: c, note: d, activeFilePath: e, sourceFileDict: f};
	});
var _user$project$Sidekick$SourceFile = F2(
	function (a, b) {
		return {moduleDocs: a, imports: b};
	});
var _user$project$Sidekick$ModuleDocs = F3(
	function (a, b, c) {
		return {packageUri: a, name: b, values: c};
	});
var _user$project$Sidekick$Values = F3(
	function (a, b, c) {
		return {aliases: a, types: b, values: c};
	});
var _user$project$Sidekick$Tipe = F4(
	function (a, b, c, d) {
		return {name: a, comment: b, tipe: c, cases: d};
	});
var _user$project$Sidekick$Value = F3(
	function (a, b, c) {
		return {name: a, comment: b, tipe: c};
	});
var _user$project$Sidekick$moduleDecoder = function (packageUri) {
	var value = A4(
		_elm_lang$core$Json_Decode$object3,
		_user$project$Sidekick$Value,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'type', _elm_lang$core$Json_Decode$string));
	var tipe = A5(
		_elm_lang$core$Json_Decode$object4,
		_user$project$Sidekick$Tipe,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'cases',
			_elm_lang$core$Json_Decode$list(
				A3(_elm_lang$core$Json_Decode$tuple2, _elm_lang$core$Basics$always, _elm_lang$core$Json_Decode$string, _elm_lang$core$Json_Decode$value))));
	var values = A4(
		_elm_lang$core$Json_Decode$object3,
		_user$project$Sidekick$Values,
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'aliases',
			_elm_lang$core$Json_Decode$list(value)),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'types',
			_elm_lang$core$Json_Decode$list(tipe)),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'values',
			_elm_lang$core$Json_Decode$list(value)));
	var name = A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string);
	return A3(
		_elm_lang$core$Json_Decode$object2,
		_user$project$Sidekick$ModuleDocs(packageUri),
		name,
		values);
};
var _user$project$Sidekick$getPackageDocs = function (packageUri) {
	var url = A2(_elm_lang$core$Basics_ops['++'], packageUri, 'documentation.json');
	return A2(
		_evancz$elm_http$Http$get,
		_elm_lang$core$Json_Decode$list(
			_user$project$Sidekick$moduleDecoder(packageUri)),
		url);
};
var _user$project$Sidekick$getPackageDocsList = function (packageuris) {
	return A2(
		_elm_lang$core$Task$map,
		_elm_lang$core$List$concat,
		_elm_lang$core$Task$sequence(
			A2(_elm_lang$core$List$map, _user$project$Sidekick$getPackageDocs, packageuris)));
};
var _user$project$Sidekick$Hint = F4(
	function (a, b, c, d) {
		return {name: a, uri: b, comment: c, tipe: d};
	});
var _user$project$Sidekick$nameToHints = F3(
	function (moduleDocs, _p10, _p9) {
		var _p11 = _p10;
		var _p12 = _p9;
		var _p13 = _p12.name;
		var localName = A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$Maybe$withDefault, moduleDocs.name, _p11.alias),
			A2(_elm_lang$core$Basics_ops['++'], '.', _p13));
		var fullName = A2(
			_elm_lang$core$Basics_ops['++'],
			moduleDocs.name,
			A2(_elm_lang$core$Basics_ops['++'], '.', _p13));
		var hint = A4(
			_user$project$Sidekick$Hint,
			fullName,
			A2(_user$project$Sidekick$urlTo, moduleDocs, _p13),
			_p12.comment,
			_p12.tipe);
		return A2(_user$project$Sidekick$isExposed, _p13, _p11.exposed) ? _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: _p13, _1: hint},
				{ctor: '_Tuple2', _0: localName, _1: hint}
			]) : _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: localName, _1: hint}
			]);
	});
var _user$project$Sidekick$unionTagsToHints = F3(
	function (moduleDocs, _p15, _p14) {
		var _p16 = _p15;
		var _p17 = _p14;
		var _p18 = _p17.name;
		var addHints = F2(
			function (tag, hints) {
				var localName = A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$Maybe$withDefault, moduleDocs.name, _p16.alias),
					A2(_elm_lang$core$Basics_ops['++'], '.', tag));
				var fullName = A2(
					_elm_lang$core$Basics_ops['++'],
					moduleDocs.name,
					A2(_elm_lang$core$Basics_ops['++'], '.', tag));
				var hint = A4(
					_user$project$Sidekick$Hint,
					fullName,
					A2(_user$project$Sidekick$urlTo, moduleDocs, _p18),
					_p17.comment,
					_p17.tipe);
				return (A2(_elm_lang$core$List$member, _p18, _user$project$Sidekick$defaultTypes) || A2(_user$project$Sidekick$isExposed, tag, _p16.exposed)) ? A2(
					_elm_lang$core$List_ops['::'],
					{ctor: '_Tuple2', _0: tag, _1: hint},
					A2(
						_elm_lang$core$List_ops['::'],
						{ctor: '_Tuple2', _0: localName, _1: hint},
						A2(
							_elm_lang$core$List_ops['::'],
							{ctor: '_Tuple2', _0: fullName, _1: hint},
							hints))) : A2(
					_elm_lang$core$List_ops['::'],
					{ctor: '_Tuple2', _0: localName, _1: hint},
					A2(
						_elm_lang$core$List_ops['::'],
						{ctor: '_Tuple2', _0: fullName, _1: hint},
						hints));
			});
		return A3(
			_elm_lang$core$List$foldl,
			addHints,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_p17.cases);
	});
var _user$project$Sidekick$filteredHints = F2(
	function (moduleDocs, importData) {
		var allValues = A2(
			_elm_lang$core$Basics_ops['++'],
			moduleDocs.values.aliases,
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$List$map, _user$project$Sidekick$tipeToValue, moduleDocs.values.types),
				moduleDocs.values.values));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$concatMap,
				A2(_user$project$Sidekick$unionTagsToHints, moduleDocs, importData),
				moduleDocs.values.types),
			A2(
				_elm_lang$core$List$concatMap,
				A2(_user$project$Sidekick$nameToHints, moduleDocs, importData),
				allValues));
	});
var _user$project$Sidekick$RawImport = F3(
	function (a, b, c) {
		return {name: a, alias: b, exposed: c};
	});
var _user$project$Sidekick$Import = F2(
	function (a, b) {
		return {alias: a, exposed: b};
	});
var _user$project$Sidekick_ops = _user$project$Sidekick_ops || {};
_user$project$Sidekick_ops['=>'] = F2(
	function (name, exposed) {
		return {
			ctor: '_Tuple2',
			_0: name,
			_1: A2(_user$project$Sidekick$Import, _elm_lang$core$Maybe$Nothing, exposed)
		};
	});
var _user$project$Sidekick$GoToDefinition = function (a) {
	return {ctor: 'GoToDefinition', _0: a};
};
var _user$project$Sidekick$UpdatePackageDocs = function (a) {
	return {ctor: 'UpdatePackageDocs', _0: a};
};
var _user$project$Sidekick$UpdateSourceFile = F2(
	function (a, b) {
		return {ctor: 'UpdateSourceFile', _0: a, _1: b};
	});
var _user$project$Sidekick$UpdateActiveFilePath = function (a) {
	return {ctor: 'UpdateActiveFilePath', _0: a};
};
var _user$project$Sidekick$CursorMove = function (a) {
	return {ctor: 'CursorMove', _0: a};
};
var _user$project$Sidekick$DocsLoaded = function (a) {
	return {ctor: 'DocsLoaded', _0: a};
};
var _user$project$Sidekick$DocsFailed = {ctor: 'DocsFailed'};
var _user$project$Sidekick$init = {
	ctor: '_Tuple2',
	_0: _user$project$Sidekick$emptyModel,
	_1: A3(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$always(_user$project$Sidekick$DocsFailed),
		_user$project$Sidekick$DocsLoaded,
		_user$project$Sidekick$getPackageDocsList(_user$project$Sidekick$defaultPackages))
};
var _user$project$Sidekick$All = {ctor: 'All'};
var _user$project$Sidekick$toTokenDict = F3(
	function (activeSourceFile, sourceFileDict, packageDocsList) {
		var insert = F2(
			function (_p19, dict) {
				var _p20 = _p19;
				return A3(
					_elm_lang$core$Dict$update,
					_p20._0,
					function (value) {
						return _elm_lang$core$Maybe$Just(
							A2(
								_elm_lang$core$List_ops['::'],
								_p20._1,
								A2(
									_elm_lang$core$Maybe$withDefault,
									_elm_lang$core$Native_List.fromArray(
										[]),
									value)));
					},
					dict);
			});
		var getMaybeHints = function (moduleDocs) {
			var activeSourceFileAndImports = A3(
				_elm_lang$core$Dict$update,
				activeSourceFile.moduleDocs.name,
				_elm_lang$core$Basics$always(
					_elm_lang$core$Maybe$Just(
						{alias: _elm_lang$core$Maybe$Nothing, exposed: _user$project$Sidekick$All})),
				activeSourceFile.imports);
			return A2(
				_elm_lang$core$Maybe$map,
				_user$project$Sidekick$filteredHints(moduleDocs),
				A2(_elm_lang$core$Dict$get, moduleDocs.name, activeSourceFileAndImports));
		};
		var sourceFileDictModuleDocs = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.moduleDocs;
			},
			_elm_lang$core$Dict$values(sourceFileDict));
		return A3(
			_elm_lang$core$List$foldl,
			insert,
			_elm_lang$core$Dict$empty,
			_elm_lang$core$List$concat(
				A2(
					_elm_lang$core$List$filterMap,
					getMaybeHints,
					A2(_elm_lang$core$Basics_ops['++'], packageDocsList, sourceFileDictModuleDocs))));
	});
var _user$project$Sidekick$Some = function (a) {
	return {ctor: 'Some', _0: a};
};
var _user$project$Sidekick$None = {ctor: 'None'};
var _user$project$Sidekick$toImport = function (_p21) {
	var _p22 = _p21;
	var exposedSet = function () {
		var _p23 = _p22.exposed;
		if (_p23.ctor === 'Nothing') {
			return _user$project$Sidekick$None;
		} else {
			if (((_p23._0.ctor === '::') && (_p23._0._0 === '..')) && (_p23._0._1.ctor === '[]')) {
				return _user$project$Sidekick$All;
			} else {
				return _user$project$Sidekick$Some(
					_elm_lang$core$Set$fromList(_p23._0));
			}
		}
	}();
	return {
		ctor: '_Tuple2',
		_0: _p22.name,
		_1: A2(_user$project$Sidekick$Import, _p22.alias, exposedSet)
	};
};
var _user$project$Sidekick$defaultImports = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Sidekick_ops['=>'], 'Basics', _user$project$Sidekick$All),
			A2(_user$project$Sidekick_ops['=>'], 'Debug', _user$project$Sidekick$None),
			A2(
			_user$project$Sidekick_ops['=>'],
			'List',
			_user$project$Sidekick$Some(
				_elm_lang$core$Set$fromList(
					_elm_lang$core$Native_List.fromArray(
						['List', '::'])))),
			A2(
			_user$project$Sidekick_ops['=>'],
			'Maybe',
			_user$project$Sidekick$Some(
				_elm_lang$core$Set$singleton('Maybe'))),
			A2(
			_user$project$Sidekick_ops['=>'],
			'Result',
			_user$project$Sidekick$Some(
				_elm_lang$core$Set$singleton('Result'))),
			A2(
			_user$project$Sidekick_ops['=>'],
			'Platform',
			_user$project$Sidekick$Some(
				_elm_lang$core$Set$singleton('Program'))),
			{
			ctor: '_Tuple2',
			_0: 'Platform.Cmd',
			_1: A2(
				_user$project$Sidekick$Import,
				_elm_lang$core$Maybe$Just('Cmd'),
				_user$project$Sidekick$Some(
					_elm_lang$core$Set$fromList(
						_elm_lang$core$Native_List.fromArray(
							['Cmd', '!']))))
		},
			{
			ctor: '_Tuple2',
			_0: 'Platform.Sub',
			_1: A2(
				_user$project$Sidekick$Import,
				_elm_lang$core$Maybe$Just('Sub'),
				_user$project$Sidekick$Some(
					_elm_lang$core$Set$singleton('Sub')))
		}
		]));
var _user$project$Sidekick$emptySourceFile = {moduleDocs: _user$project$Sidekick$emptyModuleDocs, imports: _user$project$Sidekick$defaultImports};
var _user$project$Sidekick$getActiveSourceFile = F2(
	function (activeFilePath, sourceFileDict) {
		var _p24 = activeFilePath;
		if (_p24.ctor === 'Nothing') {
			return _user$project$Sidekick$emptySourceFile;
		} else {
			var _p25 = A2(_elm_lang$core$Dict$get, _p24._0, sourceFileDict);
			if (_p25.ctor === 'Just') {
				return _p25._0;
			} else {
				return _user$project$Sidekick$emptySourceFile;
			}
		}
	});
var _user$project$Sidekick$update = F2(
	function (msg, model) {
		var _p26 = msg;
		switch (_p26.ctor) {
			case 'DocsFailed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{note: 'Failed to load -_-'}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DocsLoaded':
				var existingPackages = A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.packageUri;
					},
					model.packageDocs);
				var missingPackageDocs = A2(
					_elm_lang$core$List$filter,
					function (_p27) {
						var _p28 = _p27;
						return _elm_lang$core$Basics$not(
							A2(_elm_lang$core$List$member, _p28.packageUri, existingPackages));
					},
					_p26._0);
				var updatedPackageDocs = A2(_elm_lang$core$Basics_ops['++'], missingPackageDocs, model.packageDocs);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							packageDocs: updatedPackageDocs,
							tokens: A3(
								_user$project$Sidekick$toTokenDict,
								A2(_user$project$Sidekick$getActiveSourceFile, model.activeFilePath, model.sourceFileDict),
								model.sourceFileDict,
								updatedPackageDocs),
							note: ''
						}),
					_1: _user$project$Sidekick$docsLoaded(
						{ctor: '_Tuple0'})
				};
			case 'CursorMove':
				if (_p26._0.ctor === 'Nothing') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								hints: _elm_lang$core$Native_List.fromArray(
									[])
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								hints: A2(
									_elm_lang$core$Maybe$withDefault,
									_elm_lang$core$Native_List.fromArray(
										[]),
									A2(_elm_lang$core$Dict$get, _p26._0._0, model.tokens))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'UpdateActiveFilePath':
				var _p29 = _p26._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							activeFilePath: _p29,
							tokens: A3(
								_user$project$Sidekick$toTokenDict,
								A2(_user$project$Sidekick$getActiveSourceFile, _p29, model.sourceFileDict),
								model.sourceFileDict,
								model.packageDocs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateSourceFile':
				var updatedSourceFileDict = A3(
					_elm_lang$core$Dict$update,
					_p26._0,
					_elm_lang$core$Basics$always(
						_elm_lang$core$Maybe$Just(_p26._1)),
					model.sourceFileDict);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							sourceFileDict: updatedSourceFileDict,
							tokens: A3(
								_user$project$Sidekick$toTokenDict,
								A2(_user$project$Sidekick$getActiveSourceFile, model.activeFilePath, updatedSourceFileDict),
								updatedSourceFileDict,
								model.packageDocs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdatePackageDocs':
				var existingPackages = A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.packageUri;
					},
					model.packageDocs);
				var missingPackages = A2(
					_elm_lang$core$List$filter,
					function (packageUri) {
						return _elm_lang$core$Basics$not(
							A2(_elm_lang$core$List$member, packageUri, existingPackages));
					},
					A2(_elm_lang$core$List$map, _user$project$Sidekick$toPackageUri, _p26._0));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{note: 'Loading...'}),
					_1: A3(
						_elm_lang$core$Task$perform,
						_elm_lang$core$Basics$always(_user$project$Sidekick$DocsFailed),
						_user$project$Sidekick$DocsLoaded,
						_user$project$Sidekick$getPackageDocsList(missingPackages))
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Sidekick$goToDefinition(_p26._0)
				};
		}
	});
var _user$project$Sidekick$activeFileModuleName = F2(
	function (activeFilePath, sourceFileDict) {
		var sourceFile = A2(_user$project$Sidekick$getActiveSourceFile, activeFilePath, sourceFileDict);
		return sourceFile.moduleDocs.name;
	});
var _user$project$Sidekick$view = function (_p30) {
	var _p31 = _p30;
	var sourceView = function (hint) {
		return A2(_elm_lang$core$String$startsWith, _user$project$Sidekick$packageDocsPrefix, hint.uri) ? A2(
			_elm_lang$html$Html$a,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$title(hint.uri),
					_elm_lang$html$Html_Attributes$href(hint.uri)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('View in browser')
				])) : A2(
			_elm_lang$html$Html$a,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$title(hint.uri),
					_elm_lang$html$Html_Events$onClick(
					_user$project$Sidekick$GoToDefinition(hint.uri))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Go to Definition')
				]));
	};
	var activeModuleName = A2(_user$project$Sidekick$activeFileModuleName, _p31.activeFilePath, _p31.sourceFileDict);
	var hintMarkdown = function (hint) {
		return A2(
			_evancz$elm_markdown$Markdown$toHtml,
			_elm_lang$core$Native_List.fromArray(
				[]),
			A2(_user$project$Sidekick$viewHint, activeModuleName, hint));
	};
	var hintsView = A2(
		_elm_lang$core$List$map,
		function (hint) {
			return A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						hintMarkdown(hint),
						sourceView(hint)
					]));
		},
		_p31.hints);
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(_p31.note)
				]),
			hintsView));
};
var _user$project$Sidekick$toImportDict = function (rawImports) {
	return A2(
		_elm_lang$core$Dict$union,
		_elm_lang$core$Dict$fromList(
			A2(_elm_lang$core$List$map, _user$project$Sidekick$toImport, rawImports)),
		_user$project$Sidekick$defaultImports);
};
var _user$project$Sidekick$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Sidekick$activeTokenChanged(_user$project$Sidekick$CursorMove),
				_user$project$Sidekick$activeFilePathChanged(_user$project$Sidekick$UpdateActiveFilePath),
				_user$project$Sidekick$sourceFileChanged(
				function (_p32) {
					var _p33 = _p32;
					return A2(
						_user$project$Sidekick$UpdateSourceFile,
						_p33._0,
						A2(
							_user$project$Sidekick$SourceFile,
							_p33._1,
							_user$project$Sidekick$toImportDict(_p33._2)));
				}),
				_user$project$Sidekick$newPackagesNeeded(_user$project$Sidekick$UpdatePackageDocs)
			]));
};
var _user$project$Sidekick$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Sidekick$init, view: _user$project$Sidekick$view, update: _user$project$Sidekick$update, subscriptions: _user$project$Sidekick$subscriptions})
};
