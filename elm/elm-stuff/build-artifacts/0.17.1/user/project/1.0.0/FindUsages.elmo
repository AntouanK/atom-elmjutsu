var _user$project$FindUsages$emptyModel = {usages: _elm_lang$core$Array$empty, projectDirectory: '', selectedIndex: -1};
var _user$project$FindUsages$init = {ctor: '_Tuple2', _0: _user$project$FindUsages$emptyModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$FindUsages$setUsagesSub = _elm_lang$core$Native_Platform.incomingPort(
	'setUsagesSub',
	A3(
		_elm_lang$core$Json_Decode$tuple2,
		F2(
			function (x1, x2) {
				return {ctor: '_Tuple2', _0: x1, _1: x2};
			}),
		_elm_lang$core$Json_Decode$string,
		_elm_lang$core$Json_Decode$array(
			A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'sourcePath', _elm_lang$core$Json_Decode$string),
				function (sourcePath) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(_elm_lang$core$Json_Decode_ops[':='], 'lineText', _elm_lang$core$Json_Decode$string),
						function (lineText) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(
									_elm_lang$core$Json_Decode_ops[':='],
									'range',
									A2(
										_elm_lang$core$Json_Decode$andThen,
										A2(
											_elm_lang$core$Json_Decode_ops[':='],
											'start',
											A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(_elm_lang$core$Json_Decode_ops[':='], 'row', _elm_lang$core$Json_Decode$int),
												function (row) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(_elm_lang$core$Json_Decode_ops[':='], 'column', _elm_lang$core$Json_Decode$int),
														function (column) {
															return _elm_lang$core$Json_Decode$succeed(
																{row: row, column: column});
														});
												})),
										function (start) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(
													_elm_lang$core$Json_Decode_ops[':='],
													'end',
													A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(_elm_lang$core$Json_Decode_ops[':='], 'row', _elm_lang$core$Json_Decode$int),
														function (row) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'column', _elm_lang$core$Json_Decode$int),
																function (column) {
																	return _elm_lang$core$Json_Decode$succeed(
																		{row: row, column: column});
																});
														})),
												function (end) {
													return _elm_lang$core$Json_Decode$succeed(
														{start: start, end: end});
												});
										})),
								function (range) {
									return _elm_lang$core$Json_Decode$succeed(
										{sourcePath: sourcePath, lineText: lineText, range: range});
								});
						});
				}))));
var _user$project$FindUsages$selectNextUsageSub = _elm_lang$core$Native_Platform.incomingPort(
	'selectNextUsageSub',
	_elm_lang$core$Json_Decode$null(
		{ctor: '_Tuple0'}));
var _user$project$FindUsages$selectPreviousUsageSub = _elm_lang$core$Native_Platform.incomingPort(
	'selectPreviousUsageSub',
	_elm_lang$core$Json_Decode$null(
		{ctor: '_Tuple0'}));
var _user$project$FindUsages$viewInEditorCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'viewInEditorCmd',
	function (v) {
		return {
			sourcePath: v.sourcePath,
			lineText: v.lineText,
			range: {
				start: {row: v.range.start.row, column: v.range.start.column},
				end: {row: v.range.end.row, column: v.range.end.column}
			}
		};
	});
var _user$project$FindUsages$maybeViewInEditor = F2(
	function (index, model) {
		var _p0 = A2(_elm_lang$core$Array$get, index, model.usages);
		if (_p0.ctor === 'Nothing') {
			return _elm_lang$core$Platform_Cmd$none;
		} else {
			return _user$project$FindUsages$viewInEditorCmd(_p0._0);
		}
	});
var _user$project$FindUsages$selectDelta = F2(
	function (delta, model) {
		var updatedSelectedIndex = function () {
			var n = _elm_lang$core$Array$length(model.usages);
			return (_elm_lang$core$Native_Utils.cmp(n, 0) > 0) ? A2(_elm_lang$core$Basics_ops['%'], model.selectedIndex + delta, n) : model.selectedIndex;
		}();
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{selectedIndex: updatedSelectedIndex}),
			_1: (!_elm_lang$core$Native_Utils.eq(model.selectedIndex, updatedSelectedIndex)) ? A2(_user$project$FindUsages$maybeViewInEditor, updatedSelectedIndex, model) : _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$FindUsages$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'SetUsages':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{projectDirectory: _p1._0._0, usages: _p1._0._1, selectedIndex: -1}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SelectNextUsage':
				return A2(_user$project$FindUsages$selectDelta, 1, model);
			case 'SelectPreviousUsage':
				return A2(_user$project$FindUsages$selectDelta, -1, model);
			default:
				var _p2 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedIndex: _p2}),
					_1: A2(_user$project$FindUsages$maybeViewInEditor, _p2, model)
				};
		}
	});
var _user$project$FindUsages$Model = F3(
	function (a, b, c) {
		return {usages: a, projectDirectory: b, selectedIndex: c};
	});
var _user$project$FindUsages$Usage = F3(
	function (a, b, c) {
		return {sourcePath: a, lineText: b, range: c};
	});
var _user$project$FindUsages$Range = F2(
	function (a, b) {
		return {start: a, end: b};
	});
var _user$project$FindUsages$Point = F2(
	function (a, b) {
		return {row: a, column: b};
	});
var _user$project$FindUsages$SelectIndex = function (a) {
	return {ctor: 'SelectIndex', _0: a};
};
var _user$project$FindUsages$usageView = F4(
	function (projectDirectory, selectedIndex, index, usage) {
		var attrs = A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Events$onClick(
					_user$project$FindUsages$SelectIndex(index))
				]),
			_elm_lang$core$Native_Utils.eq(selectedIndex, index) ? _elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('selected')
				]) : _elm_lang$core$Native_List.fromArray(
				[]));
		var _p3 = usage;
		var lineText = _p3.lineText;
		var sourcePath = _p3.sourcePath;
		var range = _p3.range;
		var preSymbolText = A2(_elm_lang$core$String$left, range.start.column, lineText);
		var symbolText = function (_p4) {
			return A2(
				_elm_lang$core$String$left,
				range.end.column - range.start.column,
				A2(_elm_lang$core$String$dropLeft, range.start.column, _p4));
		}(lineText);
		var postSymbolText = A2(
			_elm_lang$core$String$right,
			_elm_lang$core$String$length(lineText) - range.end.column,
			lineText);
		return A2(
			_elm_lang$html$Html$li,
			attrs,
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$span,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text(preSymbolText)
								])),
							A2(
							_elm_lang$html$Html$span,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$class('symbol')
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text(symbolText)
								])),
							A2(
							_elm_lang$html$Html$span,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text(postSymbolText)
								]))
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('source-path')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$String$dropLeft,
									_elm_lang$core$String$length(projectDirectory),
									sourcePath),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' (',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(range.start.row + 1),
										A2(
											_elm_lang$core$Basics_ops['++'],
											',',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(range.start.column + 1),
												')'))))))
						]))
				]));
	});
var _user$project$FindUsages$view = function (_p5) {
	var _p6 = _p5;
	var _p7 = _p6.usages;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('header')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Usages: ',
							_elm_lang$core$Basics$toString(
								_elm_lang$core$Array$length(_p7))))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$ul,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Array$toList(
							A2(
								_elm_lang$core$Array$indexedMap,
								A2(_user$project$FindUsages$usageView, _p6.projectDirectory, _p6.selectedIndex),
								_p7)))
					]))
			]));
};
var _user$project$FindUsages$SelectPreviousUsage = {ctor: 'SelectPreviousUsage'};
var _user$project$FindUsages$SelectNextUsage = {ctor: 'SelectNextUsage'};
var _user$project$FindUsages$SetUsages = function (a) {
	return {ctor: 'SetUsages', _0: a};
};
var _user$project$FindUsages$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$FindUsages$setUsagesSub(_user$project$FindUsages$SetUsages),
				_user$project$FindUsages$selectNextUsageSub(
				function (_p8) {
					return _user$project$FindUsages$SelectNextUsage;
				}),
				_user$project$FindUsages$selectPreviousUsageSub(
				function (_p9) {
					return _user$project$FindUsages$SelectPreviousUsage;
				})
			]));
};
var _user$project$FindUsages$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$FindUsages$init, view: _user$project$FindUsages$view, update: _user$project$FindUsages$update, subscriptions: _user$project$FindUsages$subscriptions})
};
