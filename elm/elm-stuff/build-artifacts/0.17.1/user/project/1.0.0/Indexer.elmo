var _user$project$Indexer$capitalizedRegex = _elm_lang$core$Regex$regex('^[A-Z]');
var _user$project$Indexer$getModuleName = function (fullName) {
	return A2(
		_elm_lang$core$String$join,
		'.',
		_elm_lang$core$List$reverse(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$List$tail(
					_elm_lang$core$List$reverse(
						A2(_elm_lang$core$String$split, '.', fullName))))));
};
var _user$project$Indexer$getLastName = function (fullName) {
	return A3(
		_elm_lang$core$List$foldl,
		_elm_lang$core$Basics$always,
		'',
		A2(_elm_lang$core$String$split, '.', fullName));
};
var _user$project$Indexer$defaultTypes = _elm_lang$core$Set$fromList(
	_elm_lang$core$Native_List.fromArray(
		['Maybe', 'Result']));
var _user$project$Indexer$isExposed = F2(
	function (name, exposed) {
		var _p0 = exposed;
		switch (_p0.ctor) {
			case 'None':
				return false;
			case 'Some':
				return A2(_elm_lang$core$Set$member, name, _p0._0);
			default:
				return true;
		}
	});
var _user$project$Indexer$getLocalName = F3(
	function (moduleName, alias, name) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$Maybe$withDefault, moduleName, alias),
			A2(_elm_lang$core$Basics_ops['++'], '.', name));
	});
var _user$project$Indexer$tipeToValue = function (_p1) {
	var _p2 = _p1;
	return {name: _p2.name, comment: _p2.comment, tipe: _p2.tipe};
};
var _user$project$Indexer$symbolKindToString = function (kind) {
	var _p3 = kind;
	switch (_p3.ctor) {
		case 'KindDefault':
			return 'default';
		case 'KindTypeAlias':
			return 'type alias';
		case 'KindType':
			return 'type';
		case 'KindTypeCase':
			return 'type case';
		default:
			return 'module';
	}
};
var _user$project$Indexer$encodeHint = function (hint) {
	return {
		name: hint.name,
		moduleName: hint.moduleName,
		sourcePath: hint.sourcePath,
		comment: hint.comment,
		tipe: hint.tipe,
		caseTipe: hint.caseTipe,
		kind: _user$project$Indexer$symbolKindToString(hint.kind)
	};
};
var _user$project$Indexer$encodeSymbol = function (symbol) {
	return {
		fullName: symbol.fullName,
		sourcePath: symbol.sourcePath,
		caseTipe: symbol.caseTipe,
		kind: _user$project$Indexer$symbolKindToString(symbol.kind)
	};
};
var _user$project$Indexer$packageDocsPrefix = 'http://package.elm-lang.org/packages/';
var _user$project$Indexer$toPackageUri = function (_p4) {
	var _p5 = _p4;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Indexer$packageDocsPrefix,
		A2(
			_elm_lang$core$Basics_ops['++'],
			_p5._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/',
				A2(_elm_lang$core$Basics_ops['++'], _p5._1, '/'))));
};
var _user$project$Indexer$dotToHyphen = function (string) {
	return A2(
		_elm_lang$core$String$map,
		function (ch) {
			return _elm_lang$core$Native_Utils.eq(
				ch,
				_elm_lang$core$Native_Utils.chr('.')) ? _elm_lang$core$Native_Utils.chr('-') : ch;
		},
		string);
};
var _user$project$Indexer$formatSourcePath = F2(
	function (_p6, valueName) {
		var _p7 = _p6;
		var _p8 = _p7.sourcePath;
		return A2(_elm_lang$core$String$startsWith, _user$project$Indexer$packageDocsPrefix, _p8) ? A2(
			_elm_lang$core$Basics_ops['++'],
			_p8,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Indexer$dotToHyphen(_p7.name),
				A2(_elm_lang$core$Basics_ops['++'], '#', valueName))) : _p8;
	});
var _user$project$Indexer$nameToHints = F4(
	function (moduleDocs, _p10, kind, _p9) {
		var _p11 = _p10;
		var _p12 = _p9;
		var _p13 = _p12.name;
		var localName = A3(_user$project$Indexer$getLocalName, moduleDocs.name, _p11.alias, _p13);
		var hint = {
			name: _p13,
			moduleName: moduleDocs.name,
			sourcePath: A2(_user$project$Indexer$formatSourcePath, moduleDocs, _p13),
			comment: _p12.comment,
			tipe: _p12.tipe,
			caseTipe: _elm_lang$core$Maybe$Nothing,
			kind: kind
		};
		return A2(_user$project$Indexer$isExposed, _p13, _p11.exposed) ? _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: _p13, _1: hint},
				{ctor: '_Tuple2', _0: localName, _1: hint}
			]) : _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: localName, _1: hint}
			]);
	});
var _user$project$Indexer$isSourcePathInProjectDirectory = F2(
	function (projectDirectory, sourcePath) {
		return A2(
			_elm_lang$core$List$any,
			function (pathSep) {
				return A2(
					_elm_lang$core$String$startsWith,
					A2(_elm_lang$core$Basics_ops['++'], projectDirectory, pathSep),
					sourcePath);
			},
			_elm_lang$core$Native_List.fromArray(
				['/', '\\']));
	});
var _user$project$Indexer$getProjectFileContents = F2(
	function (projectDirectory, fileContentsDict) {
		return A2(
			_elm_lang$core$List$filter,
			function (fileContents) {
				return A2(_user$project$Indexer$isSourcePathInProjectDirectory, projectDirectory, fileContents.moduleDocs.sourcePath);
			},
			_elm_lang$core$Dict$values(fileContentsDict));
	});
var _user$project$Indexer$getProjectModuleDocs = F2(
	function (projectDirectory, fileContentsDict) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p14) {
				var _p15 = _p14;
				return A2(_user$project$Indexer$isSourcePathInProjectDirectory, projectDirectory, _p15.sourcePath);
			},
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.moduleDocs;
				},
				_elm_lang$core$Dict$values(fileContentsDict)));
	});
var _user$project$Indexer$getHintFullName = function (hint) {
	var _p16 = hint.moduleName;
	if (_p16 === '') {
		return hint.name;
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			hint.moduleName,
			A2(_elm_lang$core$Basics_ops['++'], '.', hint.name));
	}
};
var _user$project$Indexer$getSuggestionsForImport = F4(
	function (partial, maybeActiveFile, fileContentsDict, projectPackageDocs) {
		var _p17 = maybeActiveFile;
		if (_p17.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			var suggestions = A2(
				_elm_lang$core$List$map,
				function (_p18) {
					var _p19 = _p18;
					var _p21 = _p19.sourcePath;
					var _p20 = _p19.name;
					return {
						name: _p20,
						comment: _p19.comment,
						sourcePath: A2(_elm_lang$core$String$startsWith, _user$project$Indexer$packageDocsPrefix, _p21) ? A2(
							_elm_lang$core$Basics_ops['++'],
							_p21,
							_user$project$Indexer$dotToHyphen(_p20)) : ''
					};
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_user$project$Indexer$getProjectModuleDocs, _p17._0.projectDirectory, fileContentsDict),
					projectPackageDocs));
			return A2(
				_elm_lang$core$List$sortBy,
				function (_) {
					return _.name;
				},
				A2(
					_elm_lang$core$List$filter,
					function (_p22) {
						var _p23 = _p22;
						return A2(_elm_lang$core$String$startsWith, partial, _p23.name);
					},
					suggestions));
		}
	});
var _user$project$Indexer$getHintsForToken = F2(
	function (maybeToken, tokens) {
		var _p24 = maybeToken;
		if (_p24.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(_elm_lang$core$Dict$get, _p24._0, tokens));
		}
	});
var _user$project$Indexer$getImportersForToken = F6(
	function (token, isCursorAtLastPartOfToken, maybeActiveFile, tokens, activeFileContents, fileContentsDict) {
		var _p25 = maybeActiveFile;
		if (_p25.ctor === 'Just') {
			var isImportAlias = A2(
				_elm_lang$core$List$member,
				token,
				A2(
					_elm_lang$core$List$filterMap,
					function (_) {
						return _.alias;
					},
					_elm_lang$core$Dict$values(activeFileContents.imports)));
			if (isImportAlias) {
				return _elm_lang$core$Native_List.fromArray(
					[
						{
						ctor: '_Tuple4',
						_0: activeFileContents.moduleDocs.sourcePath,
						_1: true,
						_2: true,
						_3: _elm_lang$core$Native_List.fromArray(
							[token])
					}
					]);
			} else {
				var projectFileContents = A2(_user$project$Indexer$getProjectFileContents, _p25._0.projectDirectory, fileContentsDict);
				var hints = A2(
					_user$project$Indexer$getHintsForToken,
					_elm_lang$core$Maybe$Just(token),
					tokens);
				return A2(
					_elm_lang$core$List$concatMap,
					function (_p26) {
						var _p27 = _p26;
						var _p33 = _p27.moduleDocs;
						var _p32 = _p27.imports;
						var getSourcePathAndLocalNames = function (hint) {
							var isHintAModule = function (hint) {
								return _elm_lang$core$Native_Utils.eq(hint.moduleName, '') && A2(_elm_lang$core$Regex$contains, _user$project$Indexer$capitalizedRegex, hint.name);
							};
							var isHintThisModule = isHintAModule(hint) && _elm_lang$core$Native_Utils.eq(hint.name, _p33.name);
							var isHintAnImport = isHintAModule(hint) && (!_elm_lang$core$Native_Utils.eq(
								A2(_elm_lang$core$Dict$get, token, _p32),
								_elm_lang$core$Maybe$Nothing));
							if (isHintThisModule) {
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '_Tuple4',
										_0: _p33.sourcePath,
										_1: true,
										_2: false,
										_3: _elm_lang$core$Native_List.fromArray(
											[token])
									});
							} else {
								if (isHintAnImport) {
									return _elm_lang$core$Maybe$Just(
										{
											ctor: '_Tuple4',
											_0: _p33.sourcePath,
											_1: true,
											_2: false,
											_3: _elm_lang$core$Native_List.fromArray(
												[hint.name])
										});
								} else {
									var _p28 = A2(_elm_lang$core$Dict$get, hint.moduleName, _p32);
									if (_p28.ctor === 'Nothing') {
										var isHintInThisModule = _elm_lang$core$Native_Utils.eq(hint.moduleName, _p33.name);
										return isHintInThisModule ? _elm_lang$core$Maybe$Just(
											{
												ctor: '_Tuple4',
												_0: _p33.sourcePath,
												_1: false,
												_2: false,
												_3: _elm_lang$core$Native_List.fromArray(
													[hint.name])
											}) : _elm_lang$core$Maybe$Nothing;
									} else {
										var _p31 = _p28._0.alias;
										var localNames = function () {
											var _p29 = {ctor: '_Tuple2', _0: _p31, _1: _p28._0.exposed};
											switch (_p29._1.ctor) {
												case 'None':
													if (_p29._0.ctor === 'Nothing') {
														return _elm_lang$core$Native_List.fromArray(
															[
																A2(
																_elm_lang$core$Basics_ops['++'],
																hint.moduleName,
																A2(_elm_lang$core$Basics_ops['++'], '.', hint.name))
															]);
													} else {
														return _elm_lang$core$Native_List.fromArray(
															[
																A2(
																_elm_lang$core$Basics_ops['++'],
																_p29._0._0,
																A2(_elm_lang$core$Basics_ops['++'], '.', hint.name))
															]);
													}
												case 'All':
													return _elm_lang$core$Native_List.fromArray(
														[
															hint.name,
															A3(_user$project$Indexer$getLocalName, hint.moduleName, _p31, hint.name)
														]);
												default:
													return A2(_elm_lang$core$Set$member, hint.name, _p29._1._0) ? _elm_lang$core$Native_List.fromArray(
														[
															hint.name,
															A3(_user$project$Indexer$getLocalName, hint.moduleName, _p31, hint.name)
														]) : _elm_lang$core$Native_List.fromArray(
														[
															A3(_user$project$Indexer$getLocalName, hint.moduleName, _p31, hint.name)
														]);
											}
										}();
										var names = _elm_lang$core$Set$toList(
											_elm_lang$core$Set$fromList(localNames));
										var _p30 = names;
										if (_p30.ctor === '[]') {
											return _elm_lang$core$Maybe$Nothing;
										} else {
											return _elm_lang$core$Maybe$Just(
												{ctor: '_Tuple4', _0: _p33.sourcePath, _1: false, _2: false, _3: names});
										}
									}
								}
							}
						};
						return A2(_elm_lang$core$List$filterMap, getSourcePathAndLocalNames, hints);
					},
					projectFileContents);
			}
		} else {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		}
	});
var _user$project$Indexer$getProjectPackageDocs = F3(
	function (maybeActiveFile, projectDependencies, packageDocs) {
		var _p34 = maybeActiveFile;
		if (_p34.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			var _p35 = A2(_elm_lang$core$Dict$get, _p34._0.projectDirectory, projectDependencies);
			if (_p35.ctor === 'Nothing') {
				return _elm_lang$core$Native_List.fromArray(
					[]);
			} else {
				var packageUris = A2(_elm_lang$core$List$map, _user$project$Indexer$toPackageUri, _p35._0);
				return A2(
					_elm_lang$core$List$filter,
					function (moduleDocs) {
						return A2(_elm_lang$core$List$member, moduleDocs.sourcePath, packageUris);
					},
					packageDocs);
			}
		}
	});
var _user$project$Indexer$truncateModuleComment = function (moduleDocs) {
	var truncatedComment = function () {
		var _p36 = _elm_lang$core$List$head(
			A2(_elm_lang$core$String$split, '\n\n', moduleDocs.comment));
		if (_p36.ctor === 'Nothing') {
			return '';
		} else {
			return _p36._0;
		}
	}();
	return _elm_lang$core$Native_Utils.update(
		moduleDocs,
		{comment: truncatedComment});
};
var _user$project$Indexer$emptyModuleDocs = {
	sourcePath: '',
	name: '',
	values: {
		aliases: _elm_lang$core$Native_List.fromArray(
			[]),
		tipes: _elm_lang$core$Native_List.fromArray(
			[]),
		values: _elm_lang$core$Native_List.fromArray(
			[])
	},
	comment: ''
};
var _user$project$Indexer$emptyModel = {
	packageDocs: _elm_lang$core$Native_List.fromArray(
		[]),
	fileContentsDict: _elm_lang$core$Dict$empty,
	activeTokens: _elm_lang$core$Dict$empty,
	activeHints: _elm_lang$core$Native_List.fromArray(
		[]),
	activeFile: _elm_lang$core$Maybe$Nothing,
	projectDependencies: _elm_lang$core$Dict$empty
};
var _user$project$Indexer$init = {ctor: '_Tuple2', _0: _user$project$Indexer$emptyModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Indexer$activeTokenChangedSub = _elm_lang$core$Native_Platform.incomingPort(
	'activeTokenChangedSub',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
			])));
var _user$project$Indexer$activeFileChangedSub = _elm_lang$core$Native_Platform.incomingPort(
	'activeFileChangedSub',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Maybe$Just,
				A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(_elm_lang$core$Json_Decode_ops[':='], 'filePath', _elm_lang$core$Json_Decode$string),
					function (filePath) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							A2(_elm_lang$core$Json_Decode_ops[':='], 'projectDirectory', _elm_lang$core$Json_Decode$string),
							function (projectDirectory) {
								return _elm_lang$core$Json_Decode$succeed(
									{filePath: filePath, projectDirectory: projectDirectory});
							});
					}))
			])));
var _user$project$Indexer$fileContentsChangedSub = _elm_lang$core$Native_Platform.incomingPort(
	'fileContentsChangedSub',
	A4(
		_elm_lang$core$Json_Decode$tuple3,
		F3(
			function (x1, x2, x3) {
				return {ctor: '_Tuple3', _0: x1, _1: x2, _2: x3};
			}),
		_elm_lang$core$Json_Decode$string,
		A2(
			_elm_lang$core$Json_Decode$andThen,
			A2(_elm_lang$core$Json_Decode_ops[':='], 'sourcePath', _elm_lang$core$Json_Decode$string),
			function (sourcePath) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
					function (name) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							A2(
								_elm_lang$core$Json_Decode_ops[':='],
								'values',
								A2(
									_elm_lang$core$Json_Decode$andThen,
									A2(
										_elm_lang$core$Json_Decode_ops[':='],
										'aliases',
										_elm_lang$core$Json_Decode$list(
											A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
												function (name) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
														function (comment) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'tipe', _elm_lang$core$Json_Decode$string),
																function (tipe) {
																	return _elm_lang$core$Json_Decode$succeed(
																		{name: name, comment: comment, tipe: tipe});
																});
														});
												}))),
									function (aliases) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											A2(
												_elm_lang$core$Json_Decode_ops[':='],
												'tipes',
												_elm_lang$core$Json_Decode$list(
													A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
														function (name) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
																function (comment) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		A2(_elm_lang$core$Json_Decode_ops[':='], 'tipe', _elm_lang$core$Json_Decode$string),
																		function (tipe) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				A2(
																					_elm_lang$core$Json_Decode_ops[':='],
																					'cases',
																					_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
																				function (cases) {
																					return _elm_lang$core$Json_Decode$succeed(
																						{name: name, comment: comment, tipe: tipe, cases: cases});
																				});
																		});
																});
														}))),
											function (tipes) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													A2(
														_elm_lang$core$Json_Decode_ops[':='],
														'values',
														_elm_lang$core$Json_Decode$list(
															A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
																function (name) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
																		function (comment) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				A2(_elm_lang$core$Json_Decode_ops[':='], 'tipe', _elm_lang$core$Json_Decode$string),
																				function (tipe) {
																					return _elm_lang$core$Json_Decode$succeed(
																						{name: name, comment: comment, tipe: tipe});
																				});
																		});
																}))),
													function (values) {
														return _elm_lang$core$Json_Decode$succeed(
															{aliases: aliases, tipes: tipes, values: values});
													});
											});
									})),
							function (values) {
								return A2(
									_elm_lang$core$Json_Decode$andThen,
									A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
									function (comment) {
										return _elm_lang$core$Json_Decode$succeed(
											{sourcePath: sourcePath, name: name, values: values, comment: comment});
									});
							});
					});
			}),
		_elm_lang$core$Json_Decode$list(
			A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
				function (name) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'alias',
							_elm_lang$core$Json_Decode$oneOf(
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
										A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
									]))),
						function (alias) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(
									_elm_lang$core$Json_Decode_ops[':='],
									'exposed',
									_elm_lang$core$Json_Decode$oneOf(
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
												A2(
												_elm_lang$core$Json_Decode$map,
												_elm_lang$core$Maybe$Just,
												_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))
											]))),
								function (exposed) {
									return _elm_lang$core$Json_Decode$succeed(
										{name: name, alias: alias, exposed: exposed});
								});
						});
				}))));
var _user$project$Indexer$fileContentsRemovedSub = _elm_lang$core$Native_Platform.incomingPort('fileContentsRemovedSub', _elm_lang$core$Json_Decode$string);
var _user$project$Indexer$projectDependenciesChangedSub = _elm_lang$core$Native_Platform.incomingPort(
	'projectDependenciesChangedSub',
	A3(
		_elm_lang$core$Json_Decode$tuple2,
		F2(
			function (x1, x2) {
				return {ctor: '_Tuple2', _0: x1, _1: x2};
			}),
		_elm_lang$core$Json_Decode$string,
		_elm_lang$core$Json_Decode$list(
			A3(
				_elm_lang$core$Json_Decode$tuple2,
				F2(
					function (x1, x2) {
						return {ctor: '_Tuple2', _0: x1, _1: x2};
					}),
				_elm_lang$core$Json_Decode$string,
				_elm_lang$core$Json_Decode$string))));
var _user$project$Indexer$downloadMissingPackageDocsSub = _elm_lang$core$Native_Platform.incomingPort(
	'downloadMissingPackageDocsSub',
	_elm_lang$core$Json_Decode$list(
		A3(
			_elm_lang$core$Json_Decode$tuple2,
			F2(
				function (x1, x2) {
					return {ctor: '_Tuple2', _0: x1, _1: x2};
				}),
			_elm_lang$core$Json_Decode$string,
			_elm_lang$core$Json_Decode$string)));
var _user$project$Indexer$docsReadSub = _elm_lang$core$Native_Platform.incomingPort(
	'docsReadSub',
	_elm_lang$core$Json_Decode$list(
		A3(
			_elm_lang$core$Json_Decode$tuple2,
			F2(
				function (x1, x2) {
					return {ctor: '_Tuple2', _0: x1, _1: x2};
				}),
			A3(
				_elm_lang$core$Json_Decode$tuple2,
				F2(
					function (x1, x2) {
						return {ctor: '_Tuple2', _0: x1, _1: x2};
					}),
				_elm_lang$core$Json_Decode$string,
				_elm_lang$core$Json_Decode$string),
			_elm_lang$core$Json_Decode$string)));
var _user$project$Indexer$goToDefinitionSub = _elm_lang$core$Native_Platform.incomingPort(
	'goToDefinitionSub',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
			])));
var _user$project$Indexer$goToSymbolSub = _elm_lang$core$Native_Platform.incomingPort(
	'goToSymbolSub',
	A3(
		_elm_lang$core$Json_Decode$tuple2,
		F2(
			function (x1, x2) {
				return {ctor: '_Tuple2', _0: x1, _1: x2};
			}),
		_elm_lang$core$Json_Decode$oneOf(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
				])),
		_elm_lang$core$Json_Decode$oneOf(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
				]))));
var _user$project$Indexer$getHintsForPartialSub = _elm_lang$core$Native_Platform.incomingPort('getHintsForPartialSub', _elm_lang$core$Json_Decode$string);
var _user$project$Indexer$getSuggestionsForImportSub = _elm_lang$core$Native_Platform.incomingPort('getSuggestionsForImportSub', _elm_lang$core$Json_Decode$string);
var _user$project$Indexer$askCanGoToDefinitionSub = _elm_lang$core$Native_Platform.incomingPort('askCanGoToDefinitionSub', _elm_lang$core$Json_Decode$string);
var _user$project$Indexer$getImportersForTokenSub = _elm_lang$core$Native_Platform.incomingPort(
	'getImportersForTokenSub',
	A4(
		_elm_lang$core$Json_Decode$tuple3,
		F3(
			function (x1, x2, x3) {
				return {ctor: '_Tuple3', _0: x1, _1: x2, _2: x3};
			}),
		_elm_lang$core$Json_Decode$oneOf(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
				])),
		_elm_lang$core$Json_Decode$oneOf(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
				])),
		_elm_lang$core$Json_Decode$oneOf(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$bool)
				]))));
var _user$project$Indexer$docsLoadedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'docsLoadedCmd',
	function (v) {
		return _elm_lang$core$Native_List.toArray(v).map(
			function (v) {
				return [
					[v._0._0, v._0._1],
					v._1
				];
			});
	});
var _user$project$Indexer$docsFailedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'docsFailedCmd',
	function (v) {
		return null;
	});
var _user$project$Indexer$goToDefinitionCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'goToDefinitionCmd',
	function (v) {
		return {
			fullName: v.fullName,
			sourcePath: v.sourcePath,
			caseTipe: (v.caseTipe.ctor === 'Nothing') ? null : v.caseTipe._0,
			kind: v.kind
		};
	});
var _user$project$Indexer$goToSymbolCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'goToSymbolCmd',
	function (v) {
		return [
			(v._0.ctor === 'Nothing') ? null : v._0._0,
			(v._1.ctor === 'Nothing') ? null : {filePath: v._1._0.filePath, projectDirectory: v._1._0.projectDirectory},
			_elm_lang$core$Native_List.toArray(v._2).map(
			function (v) {
				return {
					fullName: v.fullName,
					sourcePath: v.sourcePath,
					caseTipe: (v.caseTipe.ctor === 'Nothing') ? null : v.caseTipe._0,
					kind: v.kind
				};
			})
		];
	});
var _user$project$Indexer$activeFileChangedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'activeFileChangedCmd',
	function (v) {
		return (v.ctor === 'Nothing') ? null : {filePath: v._0.filePath, projectDirectory: v._0.projectDirectory};
	});
var _user$project$Indexer$activeHintsChangedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'activeHintsChangedCmd',
	function (v) {
		return _elm_lang$core$Native_List.toArray(v).map(
			function (v) {
				return {
					name: v.name,
					moduleName: v.moduleName,
					sourcePath: v.sourcePath,
					comment: v.comment,
					tipe: v.tipe,
					caseTipe: (v.caseTipe.ctor === 'Nothing') ? null : v.caseTipe._0,
					kind: v.kind
				};
			});
	});
var _user$project$Indexer$updatingPackageDocsCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'updatingPackageDocsCmd',
	function (v) {
		return null;
	});
var _user$project$Indexer$readPackageDocsCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'readPackageDocsCmd',
	function (v) {
		return _elm_lang$core$Native_List.toArray(v).map(
			function (v) {
				return [v._0, v._1];
			});
	});
var _user$project$Indexer$hintsForPartialReceivedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'hintsForPartialReceivedCmd',
	function (v) {
		return [
			v._0,
			_elm_lang$core$Native_List.toArray(v._1).map(
			function (v) {
				return {
					name: v.name,
					moduleName: v.moduleName,
					sourcePath: v.sourcePath,
					comment: v.comment,
					tipe: v.tipe,
					caseTipe: (v.caseTipe.ctor === 'Nothing') ? null : v.caseTipe._0,
					kind: v.kind
				};
			})
		];
	});
var _user$project$Indexer$suggestionsForImportReceivedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'suggestionsForImportReceivedCmd',
	function (v) {
		return [
			v._0,
			_elm_lang$core$Native_List.toArray(v._1).map(
			function (v) {
				return {name: v.name, comment: v.comment, sourcePath: v.sourcePath};
			})
		];
	});
var _user$project$Indexer$canGoToDefinitionRepliedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'canGoToDefinitionRepliedCmd',
	function (v) {
		return [v._0, v._1];
	});
var _user$project$Indexer$importersForTokenReceivedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'importersForTokenReceivedCmd',
	function (v) {
		return [
			v._0,
			v._1,
			v._2,
			v._3,
			_elm_lang$core$Native_List.toArray(v._4).map(
			function (v) {
				return [
					v._0,
					v._1,
					v._2,
					_elm_lang$core$Native_List.toArray(v._3).map(
					function (v) {
						return v;
					})
				];
			})
		];
	});
var _user$project$Indexer$Model = F6(
	function (a, b, c, d, e, f) {
		return {packageDocs: a, fileContentsDict: b, activeTokens: c, activeHints: d, activeFile: e, projectDependencies: f};
	});
var _user$project$Indexer$ActiveFile = F2(
	function (a, b) {
		return {filePath: a, projectDirectory: b};
	});
var _user$project$Indexer$FileContents = F2(
	function (a, b) {
		return {moduleDocs: a, imports: b};
	});
var _user$project$Indexer$ModuleDocs = F4(
	function (a, b, c, d) {
		return {sourcePath: a, name: b, values: c, comment: d};
	});
var _user$project$Indexer$Values = F3(
	function (a, b, c) {
		return {aliases: a, tipes: b, values: c};
	});
var _user$project$Indexer$Tipe = F4(
	function (a, b, c, d) {
		return {name: a, comment: b, tipe: c, cases: d};
	});
var _user$project$Indexer$Value = F3(
	function (a, b, c) {
		return {name: a, comment: b, tipe: c};
	});
var _user$project$Indexer$moduleDocsDecoder = function (packageUri) {
	var value = A4(
		_elm_lang$core$Json_Decode$object3,
		_user$project$Indexer$Value,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'type', _elm_lang$core$Json_Decode$string));
	var tipe = A5(
		_elm_lang$core$Json_Decode$object4,
		_user$project$Indexer$Tipe,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'cases',
			_elm_lang$core$Json_Decode$list(
				A3(_elm_lang$core$Json_Decode$tuple2, _elm_lang$core$Basics$always, _elm_lang$core$Json_Decode$string, _elm_lang$core$Json_Decode$value))));
	var values = A4(
		_elm_lang$core$Json_Decode$object3,
		_user$project$Indexer$Values,
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'aliases',
			_elm_lang$core$Json_Decode$list(value)),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'types',
			_elm_lang$core$Json_Decode$list(tipe)),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'values',
			_elm_lang$core$Json_Decode$list(value)));
	var name = A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string);
	return A4(
		_elm_lang$core$Json_Decode$object3,
		_user$project$Indexer$ModuleDocs(packageUri),
		name,
		values,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string));
};
var _user$project$Indexer$downloadPackageDocs = function (dependency) {
	var packageUri = _user$project$Indexer$toPackageUri(dependency);
	var url = A2(_elm_lang$core$Basics_ops['++'], packageUri, 'documentation.json');
	return A2(
		_elm_lang$core$Task$map,
		function (jsonString) {
			return {
				ctor: '_Tuple3',
				_0: dependency,
				_1: jsonString,
				_2: A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Result$toMaybe(
						A2(
							_elm_lang$core$Json_Decode$decodeString,
							_elm_lang$core$Json_Decode$list(
								_user$project$Indexer$moduleDocsDecoder(packageUri)),
							jsonString)))
			};
		},
		_evancz$elm_http$Http$getString(url));
};
var _user$project$Indexer$downloadPackageDocsList = function (dependencies) {
	return _elm_lang$core$Task$sequence(
		A2(_elm_lang$core$List$map, _user$project$Indexer$downloadPackageDocs, dependencies));
};
var _user$project$Indexer$toModuleDocs = F2(
	function (packageUri, jsonString) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Result$toMaybe(
				A2(
					_elm_lang$core$Json_Decode$decodeString,
					_elm_lang$core$Json_Decode$list(
						_user$project$Indexer$moduleDocsDecoder(packageUri)),
					jsonString)));
	});
var _user$project$Indexer$Symbol = F4(
	function (a, b, c, d) {
		return {fullName: a, sourcePath: b, caseTipe: c, kind: d};
	});
var _user$project$Indexer$EncodedSymbol = F4(
	function (a, b, c, d) {
		return {fullName: a, sourcePath: b, caseTipe: c, kind: d};
	});
var _user$project$Indexer$Hint = F7(
	function (a, b, c, d, e, f, g) {
		return {name: a, moduleName: b, sourcePath: c, comment: d, tipe: e, caseTipe: f, kind: g};
	});
var _user$project$Indexer$EncodedHint = F7(
	function (a, b, c, d, e, f, g) {
		return {name: a, moduleName: b, sourcePath: c, comment: d, tipe: e, caseTipe: f, kind: g};
	});
var _user$project$Indexer$ImportSuggestion = F3(
	function (a, b, c) {
		return {name: a, comment: b, sourcePath: c};
	});
var _user$project$Indexer$RawImport = F3(
	function (a, b, c) {
		return {name: a, alias: b, exposed: c};
	});
var _user$project$Indexer$Import = F2(
	function (a, b) {
		return {alias: a, exposed: b};
	});
var _user$project$Indexer_ops = _user$project$Indexer_ops || {};
_user$project$Indexer_ops['=>'] = F2(
	function (name, exposed) {
		return {
			ctor: '_Tuple2',
			_0: name,
			_1: A2(_user$project$Indexer$Import, _elm_lang$core$Maybe$Nothing, exposed)
		};
	});
var _user$project$Indexer$DownloadMissingPackageDocs = function (a) {
	return {ctor: 'DownloadMissingPackageDocs', _0: a};
};
var _user$project$Indexer$GetImporterSourcePathsForToken = function (a) {
	return {ctor: 'GetImporterSourcePathsForToken', _0: a};
};
var _user$project$Indexer$AskCanGoToDefinition = function (a) {
	return {ctor: 'AskCanGoToDefinition', _0: a};
};
var _user$project$Indexer$GetSuggestionsForImport = function (a) {
	return {ctor: 'GetSuggestionsForImport', _0: a};
};
var _user$project$Indexer$GetHintsForPartial = function (a) {
	return {ctor: 'GetHintsForPartial', _0: a};
};
var _user$project$Indexer$GoToSymbol = function (a) {
	return {ctor: 'GoToSymbol', _0: a};
};
var _user$project$Indexer$GoToDefinition = function (a) {
	return {ctor: 'GoToDefinition', _0: a};
};
var _user$project$Indexer$UpdateProjectDependencies = function (a) {
	return {ctor: 'UpdateProjectDependencies', _0: a};
};
var _user$project$Indexer$RemoveFileContents = function (a) {
	return {ctor: 'RemoveFileContents', _0: a};
};
var _user$project$Indexer$UpdateFileContents = F2(
	function (a, b) {
		return {ctor: 'UpdateFileContents', _0: a, _1: b};
	});
var _user$project$Indexer$UpdateActiveFile = function (a) {
	return {ctor: 'UpdateActiveFile', _0: a};
};
var _user$project$Indexer$CursorMove = function (a) {
	return {ctor: 'CursorMove', _0: a};
};
var _user$project$Indexer$DocsRead = function (a) {
	return {ctor: 'DocsRead', _0: a};
};
var _user$project$Indexer$DocsDownloaded = function (a) {
	return {ctor: 'DocsDownloaded', _0: a};
};
var _user$project$Indexer$LoadDocsFailed = {ctor: 'LoadDocsFailed'};
var _user$project$Indexer$KindModule = {ctor: 'KindModule'};
var _user$project$Indexer$moduleToHints = F2(
	function (_p38, _p37) {
		var _p39 = _p38;
		var _p42 = _p39.name;
		var _p40 = _p37;
		var hint = {name: _p42, moduleName: '', sourcePath: _p39.sourcePath, comment: _p39.comment, tipe: '', caseTipe: _elm_lang$core$Maybe$Nothing, kind: _user$project$Indexer$KindModule};
		var _p41 = _p40.alias;
		if (_p41.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: _p42, _1: hint}
				]);
		} else {
			return _elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: _p42, _1: hint},
					{ctor: '_Tuple2', _0: _p41._0, _1: hint}
				]);
		}
	});
var _user$project$Indexer$KindTypeCase = {ctor: 'KindTypeCase'};
var _user$project$Indexer$unionTagsToHints = F3(
	function (moduleDocs, _p44, _p43) {
		var _p45 = _p44;
		var _p46 = _p43;
		var _p47 = _p46.name;
		var addHints = F2(
			function (tag, hints) {
				var localName = A3(_user$project$Indexer$getLocalName, moduleDocs.name, _p45.alias, tag);
				var hint = {
					name: tag,
					moduleName: moduleDocs.name,
					sourcePath: A2(_user$project$Indexer$formatSourcePath, moduleDocs, _p47),
					comment: _p46.comment,
					tipe: _p46.tipe,
					caseTipe: _elm_lang$core$Maybe$Just(_p47),
					kind: _user$project$Indexer$KindTypeCase
				};
				var fullName = A2(
					_elm_lang$core$Basics_ops['++'],
					moduleDocs.name,
					A2(_elm_lang$core$Basics_ops['++'], '.', tag));
				return (A2(_elm_lang$core$Set$member, _p47, _user$project$Indexer$defaultTypes) || A2(_user$project$Indexer$isExposed, tag, _p45.exposed)) ? A2(
					_elm_lang$core$List_ops['::'],
					{ctor: '_Tuple2', _0: tag, _1: hint},
					A2(
						_elm_lang$core$List_ops['::'],
						{ctor: '_Tuple2', _0: localName, _1: hint},
						A2(
							_elm_lang$core$List_ops['::'],
							{ctor: '_Tuple2', _0: fullName, _1: hint},
							hints))) : A2(
					_elm_lang$core$List_ops['::'],
					{ctor: '_Tuple2', _0: localName, _1: hint},
					A2(
						_elm_lang$core$List_ops['::'],
						{ctor: '_Tuple2', _0: fullName, _1: hint},
						hints));
			});
		return A3(
			_elm_lang$core$List$foldl,
			addHints,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_p46.cases);
	});
var _user$project$Indexer$KindType = {ctor: 'KindType'};
var _user$project$Indexer$KindTypeAlias = {ctor: 'KindTypeAlias'};
var _user$project$Indexer$KindDefault = {ctor: 'KindDefault'};
var _user$project$Indexer$getProjectSymbols = F2(
	function (projectDirectory, fileContentsDict) {
		var allFileSymbols = A2(
			_elm_lang$core$List$concatMap,
			function (_p48) {
				var _p49 = _p48;
				var _p51 = _p49.moduleDocs;
				var _p50 = _p51;
				var sourcePath = _p50.sourcePath;
				var values = _p50.values;
				var moduleDocsSymbol = {fullName: _p51.name, sourcePath: sourcePath, caseTipe: _elm_lang$core$Maybe$Nothing, kind: _user$project$Indexer$KindModule};
				var valueSymbols = A2(
					_elm_lang$core$List$map,
					function (value) {
						var kind = A2(_elm_lang$core$Regex$contains, _user$project$Indexer$capitalizedRegex, value.name) ? _user$project$Indexer$KindTypeAlias : _user$project$Indexer$KindDefault;
						return {
							fullName: A2(
								_elm_lang$core$Basics_ops['++'],
								_p51.name,
								A2(_elm_lang$core$Basics_ops['++'], '.', value.name)),
							sourcePath: A2(_user$project$Indexer$formatSourcePath, _p51, value.name),
							caseTipe: _elm_lang$core$Maybe$Nothing,
							kind: kind
						};
					},
					values.values);
				var tipeSymbols = A2(
					_elm_lang$core$List$map,
					function (tipe) {
						return {
							fullName: A2(
								_elm_lang$core$Basics_ops['++'],
								_p51.name,
								A2(_elm_lang$core$Basics_ops['++'], '.', tipe.name)),
							sourcePath: A2(_user$project$Indexer$formatSourcePath, _p51, tipe.name),
							caseTipe: _elm_lang$core$Maybe$Nothing,
							kind: _user$project$Indexer$KindType
						};
					},
					values.tipes);
				var tipeCaseSymbols = A2(
					_elm_lang$core$List$concatMap,
					function (tipe) {
						return A2(
							_elm_lang$core$List$map,
							function (caseName) {
								return {
									fullName: A2(
										_elm_lang$core$Basics_ops['++'],
										_p51.name,
										A2(_elm_lang$core$Basics_ops['++'], '.', caseName)),
									sourcePath: A2(_user$project$Indexer$formatSourcePath, _p51, caseName),
									caseTipe: _elm_lang$core$Maybe$Just(tipe.name),
									kind: _user$project$Indexer$KindTypeCase
								};
							},
							tipe.cases);
					},
					values.tipes);
				return A2(
					_elm_lang$core$Basics_ops['++'],
					valueSymbols,
					A2(
						_elm_lang$core$Basics_ops['++'],
						tipeSymbols,
						A2(
							_elm_lang$core$Basics_ops['++'],
							tipeCaseSymbols,
							_elm_lang$core$Native_List.fromArray(
								[moduleDocsSymbol]))));
			},
			_elm_lang$core$Dict$values(fileContentsDict));
		return A2(
			_elm_lang$core$List$filter,
			function (_p52) {
				var _p53 = _p52;
				var _p54 = _p53.sourcePath;
				return _elm_lang$core$Basics$not(
					A2(_elm_lang$core$String$startsWith, _user$project$Indexer$packageDocsPrefix, _p54)) && A2(_user$project$Indexer$isSourcePathInProjectDirectory, projectDirectory, _p54);
			},
			allFileSymbols);
	});
var _user$project$Indexer$emptyHint = {name: '', moduleName: '', sourcePath: '', comment: '', tipe: '', caseTipe: _elm_lang$core$Maybe$Nothing, kind: _user$project$Indexer$KindDefault};
var _user$project$Indexer$defaultSuggestions = A2(
	_elm_lang$core$List$map,
	function (suggestion) {
		return _elm_lang$core$Native_Utils.update(
			_user$project$Indexer$emptyHint,
			{name: suggestion});
	},
	_elm_lang$core$Native_List.fromArray(
		['=', '->', 'True', 'False', 'number', 'Int', 'Float', 'Char', 'String', 'Bool', 'List', 'if', 'then', 'else', 'type', 'case', 'of', 'let', 'in', 'as', 'import', 'open', 'port', 'exposing', 'alias', 'infixl', 'infixr', 'infix', 'hiding', 'export', 'foreign', 'perform', 'deriving']));
var _user$project$Indexer$filteredHints = F2(
	function (moduleDocs, importData) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$concatMap,
				A2(_user$project$Indexer$unionTagsToHints, moduleDocs, importData),
				moduleDocs.values.tipes),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$List$concatMap,
					A3(_user$project$Indexer$nameToHints, moduleDocs, importData, _user$project$Indexer$KindTypeAlias),
					moduleDocs.values.aliases),
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$concatMap,
						A3(_user$project$Indexer$nameToHints, moduleDocs, importData, _user$project$Indexer$KindType),
						A2(_elm_lang$core$List$map, _user$project$Indexer$tipeToValue, moduleDocs.values.tipes)),
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$concatMap,
							A3(_user$project$Indexer$nameToHints, moduleDocs, importData, _user$project$Indexer$KindDefault),
							moduleDocs.values.values),
						A2(_user$project$Indexer$moduleToHints, moduleDocs, importData)))));
	});
var _user$project$Indexer$All = {ctor: 'All'};
var _user$project$Indexer$getImportsPlusActiveModule = function (fileContents) {
	return A3(
		_elm_lang$core$Dict$update,
		fileContents.moduleDocs.name,
		_elm_lang$core$Basics$always(
			_elm_lang$core$Maybe$Just(
				{alias: _elm_lang$core$Maybe$Nothing, exposed: _user$project$Indexer$All})),
		fileContents.imports);
};
var _user$project$Indexer$Some = function (a) {
	return {ctor: 'Some', _0: a};
};
var _user$project$Indexer$None = {ctor: 'None'};
var _user$project$Indexer$toImport = function (_p55) {
	var _p56 = _p55;
	var exposedSet = function () {
		var _p57 = _p56.exposed;
		if (_p57.ctor === 'Nothing') {
			return _user$project$Indexer$None;
		} else {
			if (((_p57._0.ctor === '::') && (_p57._0._0 === '..')) && (_p57._0._1.ctor === '[]')) {
				return _user$project$Indexer$All;
			} else {
				return _user$project$Indexer$Some(
					_elm_lang$core$Set$fromList(_p57._0));
			}
		}
	}();
	return {
		ctor: '_Tuple2',
		_0: _p56.name,
		_1: A2(_user$project$Indexer$Import, _p56.alias, exposedSet)
	};
};
var _user$project$Indexer$defaultImports = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Indexer_ops['=>'], 'Basics', _user$project$Indexer$All),
			A2(_user$project$Indexer_ops['=>'], 'Debug', _user$project$Indexer$None),
			A2(
			_user$project$Indexer_ops['=>'],
			'List',
			_user$project$Indexer$Some(
				_elm_lang$core$Set$fromList(
					_elm_lang$core$Native_List.fromArray(
						['List', '::'])))),
			A2(
			_user$project$Indexer_ops['=>'],
			'Maybe',
			_user$project$Indexer$Some(
				_elm_lang$core$Set$singleton('Maybe'))),
			A2(
			_user$project$Indexer_ops['=>'],
			'Result',
			_user$project$Indexer$Some(
				_elm_lang$core$Set$singleton('Result'))),
			A2(
			_user$project$Indexer_ops['=>'],
			'Platform',
			_user$project$Indexer$Some(
				_elm_lang$core$Set$singleton('Program'))),
			{
			ctor: '_Tuple2',
			_0: 'Platform.Cmd',
			_1: A2(
				_user$project$Indexer$Import,
				_elm_lang$core$Maybe$Just('Cmd'),
				_user$project$Indexer$Some(
					_elm_lang$core$Set$fromList(
						_elm_lang$core$Native_List.fromArray(
							['Cmd', '!']))))
		},
			{
			ctor: '_Tuple2',
			_0: 'Platform.Sub',
			_1: A2(
				_user$project$Indexer$Import,
				_elm_lang$core$Maybe$Just('Sub'),
				_user$project$Indexer$Some(
					_elm_lang$core$Set$singleton('Sub')))
		}
		]));
var _user$project$Indexer$emptyFileContents = {moduleDocs: _user$project$Indexer$emptyModuleDocs, imports: _user$project$Indexer$defaultImports};
var _user$project$Indexer$getActiveFileContents = F2(
	function (maybeActiveFile, fileContentsDict) {
		var _p58 = maybeActiveFile;
		if (_p58.ctor === 'Nothing') {
			return _user$project$Indexer$emptyFileContents;
		} else {
			var _p59 = A2(_elm_lang$core$Dict$get, _p58._0.filePath, fileContentsDict);
			if (_p59.ctor === 'Just') {
				return _p59._0;
			} else {
				return _user$project$Indexer$emptyFileContents;
			}
		}
	});
var _user$project$Indexer$getImportsPlusActiveModuleForActiveFile = F2(
	function (maybeActiveFile, fileContentsDict) {
		return _user$project$Indexer$getImportsPlusActiveModule(
			A2(_user$project$Indexer$getActiveFileContents, maybeActiveFile, fileContentsDict));
	});
var _user$project$Indexer$getExposedHints = F3(
	function (activeFile, fileContentsDict, projectPackageDocs) {
		var _p60 = activeFile;
		if (_p60.ctor === 'Nothing') {
			return _elm_lang$core$Set$empty;
		} else {
			var importsPlusActiveModule = A2(_user$project$Indexer$getImportsPlusActiveModuleForActiveFile, activeFile, fileContentsDict);
			var importedModuleNames = _elm_lang$core$Dict$keys(importsPlusActiveModule);
			var importedModuleDocs = A2(
				_elm_lang$core$List$filter,
				function (moduleDocs) {
					return A2(_elm_lang$core$List$member, moduleDocs.name, importedModuleNames);
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					projectPackageDocs,
					A2(_user$project$Indexer$getProjectModuleDocs, _p60._0.projectDirectory, fileContentsDict)));
			var imports = _elm_lang$core$Dict$values(importsPlusActiveModule);
			return _elm_lang$core$Set$fromList(
				A2(
					_elm_lang$core$List$concatMap,
					function (moduleDocs) {
						var exposed = function () {
							var _p61 = A2(_elm_lang$core$Dict$get, moduleDocs.name, importsPlusActiveModule);
							if (_p61.ctor === 'Nothing') {
								return _user$project$Indexer$None;
							} else {
								return _p61._0.exposed;
							}
						}();
						return A2(
							_elm_lang$core$List$map,
							function (name) {
								return {ctor: '_Tuple2', _0: moduleDocs.name, _1: name};
							},
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$List$map,
									function (_) {
										return _.name;
									},
									A2(
										_elm_lang$core$List$filter,
										function (_p62) {
											var _p63 = _p62;
											return A2(_user$project$Indexer$isExposed, _p63.name, exposed);
										},
										A2(
											_elm_lang$core$Basics_ops['++'],
											moduleDocs.values.aliases,
											A2(
												_elm_lang$core$Basics_ops['++'],
												A2(_elm_lang$core$List$map, _user$project$Indexer$tipeToValue, moduleDocs.values.tipes),
												moduleDocs.values.values)))),
								A2(
									_elm_lang$core$List$concatMap,
									function (_p64) {
										var _p65 = _p64;
										return A2(
											_elm_lang$core$List$filter,
											function (kase) {
												return A2(_elm_lang$core$Set$member, _p65.name, _user$project$Indexer$defaultTypes) || A2(_user$project$Indexer$isExposed, kase, exposed);
											},
											_p65.cases);
									},
									moduleDocs.values.tipes)));
					},
					importedModuleDocs));
		}
	});
var _user$project$Indexer$getHintsForPartial = F5(
	function (partial, activeFile, fileContentsDict, projectPackageDocs, tokens) {
		var defaultHints = A2(
			_elm_lang$core$List$filter,
			function (_p66) {
				var _p67 = _p66;
				return A2(_elm_lang$core$String$startsWith, partial, _p67.name);
			},
			_user$project$Indexer$defaultSuggestions);
		var activeFileContents = A2(_user$project$Indexer$getActiveFileContents, activeFile, fileContentsDict);
		var importAliases = A2(
			_elm_lang$core$List$filterMap,
			function (_p68) {
				var _p69 = _p68;
				var _p70 = _p69.alias;
				if (_p70.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var _p71 = _p70._0;
					return A2(_elm_lang$core$String$startsWith, partial, _p71) ? _elm_lang$core$Maybe$Just(
						_elm_lang$core$Native_Utils.update(
							_user$project$Indexer$emptyHint,
							{name: _p71})) : _elm_lang$core$Maybe$Nothing;
				}
			},
			_elm_lang$core$Dict$values(activeFileContents.imports));
		var exposedSet = A3(_user$project$Indexer$getExposedHints, activeFile, fileContentsDict, projectPackageDocs);
		var exposedNames = A2(_elm_lang$core$Set$map, _elm_lang$core$Basics$snd, exposedSet);
		var maybeIncludeHint = function (hint) {
			var isIncluded = (_elm_lang$core$Native_Utils.eq(hint.moduleName, '') || A2(
				_elm_lang$core$Set$member,
				{ctor: '_Tuple2', _0: hint.moduleName, _1: hint.name},
				exposedSet)) ? A2(_elm_lang$core$String$startsWith, partial, hint.name) : true;
			if (_elm_lang$core$Basics$not(isIncluded)) {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var nameToShow = function () {
					if (_elm_lang$core$Native_Utils.eq(hint.moduleName, '')) {
						return hint.name;
					} else {
						if (A2(
							_elm_lang$core$Set$member,
							{ctor: '_Tuple2', _0: hint.moduleName, _1: hint.name},
							exposedSet)) {
							return hint.name;
						} else {
							var moduleNamePrefix = function () {
								var _p72 = A2(_elm_lang$core$Dict$get, hint.moduleName, activeFileContents.imports);
								if (_p72.ctor === 'Nothing') {
									return '';
								} else {
									var _p73 = _p72._0.alias;
									if (_p73.ctor === 'Nothing') {
										return A2(_elm_lang$core$Basics_ops['++'], hint.moduleName, '.');
									} else {
										return A2(_elm_lang$core$Basics_ops['++'], _p73._0, '.');
									}
								}
							}();
							return A2(_elm_lang$core$Basics_ops['++'], moduleNamePrefix, hint.name);
						}
					}
				}();
				var moduleNameToShow = (_elm_lang$core$Native_Utils.eq(hint.moduleName, '') || _elm_lang$core$Native_Utils.eq(activeFileContents.moduleDocs.name, hint.moduleName)) ? '' : hint.moduleName;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Native_Utils.update(
						hint,
						{name: nameToShow, moduleName: moduleNameToShow}));
			}
		};
		var hints = A2(
			_elm_lang$core$List$concatMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Dict$values(
				A2(
					_elm_lang$core$Dict$map,
					F2(
						function (token, hints) {
							var isIncluded = A2(
								_elm_lang$core$Set$member,
								_user$project$Indexer$getLastName(token),
								exposedNames) ? (A2(
								_elm_lang$core$String$startsWith,
								partial,
								_user$project$Indexer$getLastName(token)) || A2(_elm_lang$core$String$startsWith, partial, token)) : A2(_elm_lang$core$String$startsWith, partial, token);
							return isIncluded ? A2(_elm_lang$core$List$filterMap, maybeIncludeHint, hints) : _elm_lang$core$Native_List.fromArray(
								[]);
						}),
					tokens)));
		return A2(
			_elm_lang$core$List$sortBy,
			function (_) {
				return _.name;
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				importAliases,
				A2(_elm_lang$core$Basics_ops['++'], hints, defaultHints)));
	});
var _user$project$Indexer$toTokenDict = F3(
	function (maybeActiveFile, fileContentsDict, projectPackageDocs) {
		var _p74 = maybeActiveFile;
		if (_p74.ctor === 'Nothing') {
			return _elm_lang$core$Dict$empty;
		} else {
			var insert = F2(
				function (_p75, dict) {
					var _p76 = _p75;
					return A3(
						_elm_lang$core$Dict$update,
						_p76._0,
						function (value) {
							return _elm_lang$core$Maybe$Just(
								A2(
									_elm_lang$core$List_ops['::'],
									_p76._1,
									A2(
										_elm_lang$core$Maybe$withDefault,
										_elm_lang$core$Native_List.fromArray(
											[]),
										value)));
						},
						dict);
				});
			var getMaybeHints = function (moduleDocs) {
				return A2(
					_elm_lang$core$Maybe$map,
					_user$project$Indexer$filteredHints(moduleDocs),
					A2(
						_elm_lang$core$Dict$get,
						moduleDocs.name,
						A2(_user$project$Indexer$getImportsPlusActiveModuleForActiveFile, maybeActiveFile, fileContentsDict)));
			};
			return A3(
				_elm_lang$core$List$foldl,
				insert,
				_elm_lang$core$Dict$empty,
				_elm_lang$core$List$concat(
					A2(
						_elm_lang$core$List$filterMap,
						getMaybeHints,
						A2(
							_elm_lang$core$Basics_ops['++'],
							projectPackageDocs,
							A2(_user$project$Indexer$getProjectModuleDocs, _p74._0.projectDirectory, fileContentsDict)))));
		}
	});
var _user$project$Indexer$addLoadedPackageDocs = F2(
	function (loadedPackageDocs, model) {
		var existingPackages = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.sourcePath;
			},
			model.packageDocs);
		var missingPackageDocs = A2(
			_elm_lang$core$List$filter,
			function (_p77) {
				var _p78 = _p77;
				return _elm_lang$core$Basics$not(
					A2(_elm_lang$core$List$member, _p78.sourcePath, existingPackages));
			},
			loadedPackageDocs);
		var updatedPackageDocs = A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$List$map, _user$project$Indexer$truncateModuleComment, missingPackageDocs),
			model.packageDocs);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				packageDocs: updatedPackageDocs,
				activeTokens: A3(
					_user$project$Indexer$toTokenDict,
					model.activeFile,
					model.fileContentsDict,
					A3(_user$project$Indexer$getProjectPackageDocs, model.activeFile, model.projectDependencies, updatedPackageDocs))
			});
	});
var _user$project$Indexer$update = F2(
	function (msg, model) {
		var _p79 = A2(_elm_lang$core$Debug$log, 'msg', msg);
		var _p80 = msg;
		switch (_p80.ctor) {
			case 'LoadDocsFailed':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Indexer$docsFailedCmd(
						{ctor: '_Tuple0'})
				};
			case 'DocsDownloaded':
				var _p85 = _p80._0;
				var loadedDependenciesAndJson = A2(
					_elm_lang$core$List$map,
					function (_p81) {
						var _p82 = _p81;
						return {ctor: '_Tuple2', _0: _p82._0, _1: _p82._1};
					},
					_p85);
				var loadedPackageDocs = A2(
					_elm_lang$core$List$concatMap,
					function (_p83) {
						var _p84 = _p83;
						return _p84._2;
					},
					_p85);
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Indexer$addLoadedPackageDocs, loadedPackageDocs, model),
					_1: _user$project$Indexer$docsLoadedCmd(loadedDependenciesAndJson)
				};
			case 'DocsRead':
				var loadedPackageDocs = A2(
					_elm_lang$core$List$concatMap,
					function (_p86) {
						var _p87 = _p86;
						return A2(
							_user$project$Indexer$toModuleDocs,
							_user$project$Indexer$toPackageUri(_p87._0),
							_p87._1);
					},
					_p80._0);
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Indexer$addLoadedPackageDocs, loadedPackageDocs, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CursorMove':
				var updatedActiveHints = A2(_user$project$Indexer$getHintsForToken, _p80._0, model.activeTokens);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{activeHints: updatedActiveHints}),
					_1: _user$project$Indexer$activeHintsChangedCmd(
						A2(_elm_lang$core$List$map, _user$project$Indexer$encodeHint, updatedActiveHints))
				};
			case 'UpdateActiveFile':
				var _p88 = _p80._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							activeFile: _p88,
							activeTokens: A3(
								_user$project$Indexer$toTokenDict,
								_p88,
								model.fileContentsDict,
								A3(_user$project$Indexer$getProjectPackageDocs, _p88, model.projectDependencies, model.packageDocs))
						}),
					_1: _user$project$Indexer$activeFileChangedCmd(_p88)
				};
			case 'UpdateFileContents':
				var updatedFileContentsDict = A3(
					_elm_lang$core$Dict$update,
					_p80._0,
					_elm_lang$core$Basics$always(
						_elm_lang$core$Maybe$Just(_p80._1)),
					model.fileContentsDict);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							fileContentsDict: updatedFileContentsDict,
							activeTokens: A3(
								_user$project$Indexer$toTokenDict,
								model.activeFile,
								updatedFileContentsDict,
								A3(_user$project$Indexer$getProjectPackageDocs, model.activeFile, model.projectDependencies, model.packageDocs))
						}),
					_1: _user$project$Indexer$activeFileChangedCmd(model.activeFile)
				};
			case 'RemoveFileContents':
				var updatedFileContentsDict = A2(_elm_lang$core$Dict$remove, _p80._0, model.fileContentsDict);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							fileContentsDict: updatedFileContentsDict,
							activeTokens: A3(
								_user$project$Indexer$toTokenDict,
								model.activeFile,
								updatedFileContentsDict,
								A3(_user$project$Indexer$getProjectPackageDocs, model.activeFile, model.projectDependencies, model.packageDocs))
						}),
					_1: _user$project$Indexer$activeFileChangedCmd(model.activeFile)
				};
			case 'UpdateProjectDependencies':
				var _p89 = _p80._0._1;
				var existingPackages = A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.sourcePath;
					},
					model.packageDocs);
				var missingDependencies = A2(
					_elm_lang$core$List$filter,
					function (dependency) {
						return _elm_lang$core$Basics$not(
							A2(
								_elm_lang$core$List$member,
								_user$project$Indexer$toPackageUri(dependency),
								existingPackages));
					},
					_p89);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							projectDependencies: A3(
								_elm_lang$core$Dict$update,
								_p80._0._0,
								_elm_lang$core$Basics$always(
									_elm_lang$core$Maybe$Just(_p89)),
								model.projectDependencies)
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						_elm_lang$core$Native_List.fromArray(
							[
								_user$project$Indexer$updatingPackageDocsCmd(
								{ctor: '_Tuple0'}),
								_user$project$Indexer$readPackageDocsCmd(missingDependencies)
							]))
				};
			case 'DownloadMissingPackageDocs':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A3(
						_elm_lang$core$Task$perform,
						_elm_lang$core$Basics$always(_user$project$Indexer$LoadDocsFailed),
						_user$project$Indexer$DocsDownloaded,
						_user$project$Indexer$downloadPackageDocsList(_p80._0))
				};
			case 'GoToDefinition':
				var requests = A2(
					_elm_lang$core$List$map,
					function (hint) {
						var symbol = {
							fullName: _user$project$Indexer$getHintFullName(hint),
							sourcePath: hint.sourcePath,
							caseTipe: hint.caseTipe,
							kind: hint.kind
						};
						return _user$project$Indexer$goToDefinitionCmd(
							_user$project$Indexer$encodeSymbol(symbol));
					},
					A2(_user$project$Indexer$getHintsForToken, _p80._0, model.activeTokens));
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$batch(requests)
				};
			case 'GoToSymbol':
				var _p94 = _p80._0._1;
				var _p90 = _p80._0._0;
				if (_p90.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var hints = A2(_user$project$Indexer$getHintsForToken, _p94, model.activeTokens);
					var defaultSymbolName = function () {
						var _p91 = _elm_lang$core$List$head(hints);
						if (_p91.ctor === 'Nothing') {
							return _p94;
						} else {
							var _p93 = _p91._0;
							var _p92 = model.activeFile;
							if (_p92.ctor === 'Nothing') {
								return _elm_lang$core$Maybe$Just(_p93.name);
							} else {
								return _elm_lang$core$Native_Utils.eq(_p92._0.filePath, _p93.sourcePath) ? _elm_lang$core$Maybe$Just(
									_user$project$Indexer$getLastName(_p93.name)) : _elm_lang$core$Maybe$Just(_p93.name);
							}
						}
					}();
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Indexer$goToSymbolCmd(
							{
								ctor: '_Tuple3',
								_0: defaultSymbolName,
								_1: model.activeFile,
								_2: A2(
									_elm_lang$core$List$map,
									_user$project$Indexer$encodeSymbol,
									A2(_user$project$Indexer$getProjectSymbols, _p90._0, model.fileContentsDict))
							})
					};
				}
			case 'GetHintsForPartial':
				var _p95 = _p80._0;
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Indexer$hintsForPartialReceivedCmd(
						{
							ctor: '_Tuple2',
							_0: _p95,
							_1: A2(
								_elm_lang$core$List$map,
								_user$project$Indexer$encodeHint,
								A5(
									_user$project$Indexer$getHintsForPartial,
									_p95,
									model.activeFile,
									model.fileContentsDict,
									A3(_user$project$Indexer$getProjectPackageDocs, model.activeFile, model.projectDependencies, model.packageDocs),
									model.activeTokens))
						})
				};
			case 'GetSuggestionsForImport':
				var _p96 = _p80._0;
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Indexer$suggestionsForImportReceivedCmd(
						{
							ctor: '_Tuple2',
							_0: _p96,
							_1: A4(
								_user$project$Indexer$getSuggestionsForImport,
								_p96,
								model.activeFile,
								model.fileContentsDict,
								A3(_user$project$Indexer$getProjectPackageDocs, model.activeFile, model.projectDependencies, model.packageDocs))
						})
				};
			case 'AskCanGoToDefinition':
				var _p97 = _p80._0;
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Indexer$canGoToDefinitionRepliedCmd(
						{
							ctor: '_Tuple2',
							_0: _p97,
							_1: A2(_elm_lang$core$Dict$member, _p97, model.activeTokens)
						})
				};
			default:
				var _p98 = {ctor: '_Tuple3', _0: _p80._0._0, _1: _p80._0._1, _2: _p80._0._2};
				if ((((_p98.ctor === '_Tuple3') && (_p98._0.ctor === 'Just')) && (_p98._1.ctor === 'Just')) && (_p98._2.ctor === 'Just')) {
					var _p101 = _p98._1._0;
					var _p100 = _p98._2._0;
					var activeFileContents = A2(_user$project$Indexer$getActiveFileContents, model.activeFile, model.fileContentsDict);
					var _p99 = _elm_lang$core$Native_Utils.eq(_p101, activeFileContents.moduleDocs.name) ? {ctor: '_Tuple2', _0: _p101, _1: true} : ((!_elm_lang$core$Native_Utils.eq(
						A2(_elm_lang$core$Dict$get, _p101, activeFileContents.imports),
						_elm_lang$core$Maybe$Nothing)) ? {ctor: '_Tuple2', _0: _p101, _1: true} : (_p100 ? {ctor: '_Tuple2', _0: _p101, _1: false} : {
						ctor: '_Tuple2',
						_0: _user$project$Indexer$getModuleName(_p101),
						_1: false
					}));
					var token = _p99._0;
					var willUseFullToken = _p99._1;
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Indexer$importersForTokenReceivedCmd(
							{
								ctor: '_Tuple5',
								_0: _p98._0._0,
								_1: _p101,
								_2: willUseFullToken,
								_3: _p100,
								_4: A6(_user$project$Indexer$getImportersForToken, token, _p100, model.activeFile, model.activeTokens, activeFileContents, model.fileContentsDict)
							})
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _user$project$Indexer$toImportDict = function (rawImports) {
	return A2(
		_elm_lang$core$Dict$union,
		_elm_lang$core$Dict$fromList(
			A2(_elm_lang$core$List$map, _user$project$Indexer$toImport, rawImports)),
		_user$project$Indexer$defaultImports);
};
var _user$project$Indexer$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Indexer$activeTokenChangedSub(_user$project$Indexer$CursorMove),
				_user$project$Indexer$activeFileChangedSub(_user$project$Indexer$UpdateActiveFile),
				_user$project$Indexer$fileContentsChangedSub(
				function (_p102) {
					var _p103 = _p102;
					return A2(
						_user$project$Indexer$UpdateFileContents,
						_p103._0,
						A2(
							_user$project$Indexer$FileContents,
							_p103._1,
							_user$project$Indexer$toImportDict(_p103._2)));
				}),
				_user$project$Indexer$fileContentsRemovedSub(_user$project$Indexer$RemoveFileContents),
				_user$project$Indexer$projectDependenciesChangedSub(_user$project$Indexer$UpdateProjectDependencies),
				_user$project$Indexer$downloadMissingPackageDocsSub(_user$project$Indexer$DownloadMissingPackageDocs),
				_user$project$Indexer$docsReadSub(_user$project$Indexer$DocsRead),
				_user$project$Indexer$goToDefinitionSub(_user$project$Indexer$GoToDefinition),
				_user$project$Indexer$goToSymbolSub(_user$project$Indexer$GoToSymbol),
				_user$project$Indexer$getHintsForPartialSub(_user$project$Indexer$GetHintsForPartial),
				_user$project$Indexer$getSuggestionsForImportSub(_user$project$Indexer$GetSuggestionsForImport),
				_user$project$Indexer$askCanGoToDefinitionSub(_user$project$Indexer$AskCanGoToDefinition),
				_user$project$Indexer$getImportersForTokenSub(_user$project$Indexer$GetImporterSourcePathsForToken)
			]));
};
var _user$project$Indexer$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: _user$project$Indexer$init,
			view: function (_p104) {
				return A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[]));
			},
			update: _user$project$Indexer$update,
			subscriptions: _user$project$Indexer$subscriptions
		})
};
