var _user$project$Indexer$lastName = function (fullName) {
	return A3(
		_elm_lang$core$List$foldl,
		_elm_lang$core$Basics$always,
		'',
		A2(_elm_lang$core$String$split, '.', fullName));
};
var _user$project$Indexer$defaultTypes = _elm_lang$core$Set$fromList(
	_elm_lang$core$Native_List.fromArray(
		['Maybe', 'Result']));
var _user$project$Indexer$isExposed = F2(
	function (name, exposed) {
		var _p0 = exposed;
		switch (_p0.ctor) {
			case 'None':
				return false;
			case 'Some':
				return A2(_elm_lang$core$Set$member, name, _p0._0);
			default:
				return true;
		}
	});
var _user$project$Indexer$tipeToValue = function (_p1) {
	var _p2 = _p1;
	return {name: _p2.name, comment: _p2.comment, tipe: _p2.tipe};
};
var _user$project$Indexer$symbolKindToString = function (kind) {
	var _p3 = kind;
	switch (_p3.ctor) {
		case 'KindDefault':
			return 'default';
		case 'KindTypeAlias':
			return 'type alias';
		case 'KindType':
			return 'type';
		case 'KindTypeCase':
			return 'type case';
		default:
			return 'module';
	}
};
var _user$project$Indexer$encodeHint = function (hint) {
	return {
		name: hint.name,
		moduleName: hint.moduleName,
		sourcePath: hint.sourcePath,
		comment: hint.comment,
		tipe: hint.tipe,
		caseTipe: hint.caseTipe,
		kind: _user$project$Indexer$symbolKindToString(hint.kind)
	};
};
var _user$project$Indexer$encodeSymbol = function (symbol) {
	return {
		fullName: symbol.fullName,
		sourcePath: symbol.sourcePath,
		caseTipe: symbol.caseTipe,
		kind: _user$project$Indexer$symbolKindToString(symbol.kind)
	};
};
var _user$project$Indexer$packageDocsPrefix = 'http://package.elm-lang.org/packages/';
var _user$project$Indexer$toPackageUri = function ($package) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Indexer$packageDocsPrefix,
		A2(_elm_lang$core$Basics_ops['++'], $package, '/latest/'));
};
var _user$project$Indexer$defaultPackages = A2(
	_elm_lang$core$List$map,
	_user$project$Indexer$toPackageUri,
	_elm_lang$core$Native_List.fromArray(
		['elm-lang/core']));
var _user$project$Indexer$dotToHyphen = function (string) {
	return A2(
		_elm_lang$core$String$map,
		function (ch) {
			return _elm_lang$core$Native_Utils.eq(
				ch,
				_elm_lang$core$Native_Utils.chr('.')) ? _elm_lang$core$Native_Utils.chr('-') : ch;
		},
		string);
};
var _user$project$Indexer$formatSourcePath = F2(
	function (_p4, valueName) {
		var _p5 = _p4;
		var _p6 = _p5.sourcePath;
		return A2(_elm_lang$core$String$startsWith, _user$project$Indexer$packageDocsPrefix, _p6) ? A2(
			_elm_lang$core$Basics_ops['++'],
			_p6,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Indexer$dotToHyphen(_p5.name),
				A2(_elm_lang$core$Basics_ops['++'], '#', valueName))) : _p6;
	});
var _user$project$Indexer$nameToHints = F4(
	function (moduleDocs, _p8, kind, _p7) {
		var _p9 = _p8;
		var _p10 = _p7;
		var _p11 = _p10.name;
		var localName = A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$Maybe$withDefault, moduleDocs.name, _p9.alias),
			A2(_elm_lang$core$Basics_ops['++'], '.', _p11));
		var hint = {
			name: _p11,
			moduleName: moduleDocs.name,
			sourcePath: A2(_user$project$Indexer$formatSourcePath, moduleDocs, _p11),
			comment: _p10.comment,
			tipe: _p10.tipe,
			caseTipe: _elm_lang$core$Maybe$Nothing,
			kind: kind
		};
		return A2(_user$project$Indexer$isExposed, _p11, _p9.exposed) ? _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: _p11, _1: hint},
				{ctor: '_Tuple2', _0: localName, _1: hint}
			]) : _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: localName, _1: hint}
			]);
	});
var _user$project$Indexer$isSourcePathInProjectDirectory = F2(
	function (projectDirectory, sourcePath) {
		return A2(
			_elm_lang$core$List$any,
			function (pathSep) {
				return A2(
					_elm_lang$core$String$startsWith,
					A2(_elm_lang$core$Basics_ops['++'], projectDirectory, pathSep),
					sourcePath);
			},
			_elm_lang$core$Native_List.fromArray(
				['/', '\\']));
	});
var _user$project$Indexer$projectModuleDocs = F2(
	function (projectDirectory, fileContentsDict) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p12) {
				var _p13 = _p12;
				return A2(_user$project$Indexer$isSourcePathInProjectDirectory, projectDirectory, _p13.sourcePath);
			},
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.moduleDocs;
				},
				_elm_lang$core$Dict$values(fileContentsDict)));
	});
var _user$project$Indexer$suggestionsForImport = F4(
	function (partial, activeFile, fileContentsDict, packageDocs) {
		var _p14 = activeFile;
		if (_p14.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			var suggestions = A2(
				_elm_lang$core$List$map,
				function (_p15) {
					var _p16 = _p15;
					var _p18 = _p16.sourcePath;
					var _p17 = _p16.name;
					return {
						name: _p17,
						comment: _p16.comment,
						sourcePath: A2(_elm_lang$core$String$startsWith, _user$project$Indexer$packageDocsPrefix, _p18) ? A2(
							_elm_lang$core$Basics_ops['++'],
							_p18,
							_user$project$Indexer$dotToHyphen(_p17)) : ''
					};
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_user$project$Indexer$projectModuleDocs, _p14._0.projectDirectory, fileContentsDict),
					packageDocs));
			return A2(
				_elm_lang$core$List$sortBy,
				function (_) {
					return _.name;
				},
				A2(
					_elm_lang$core$List$filter,
					function (_p19) {
						var _p20 = _p19;
						return A2(_elm_lang$core$String$startsWith, partial, _p20.name);
					},
					suggestions));
		}
	});
var _user$project$Indexer$hintFullName = function (hint) {
	return _elm_lang$core$Native_Utils.eq(hint.moduleName, '') ? hint.name : A2(
		_elm_lang$core$Basics_ops['++'],
		hint.moduleName,
		A2(_elm_lang$core$Basics_ops['++'], '.', hint.name));
};
var _user$project$Indexer$hintsForToken = F2(
	function (maybeToken, tokens) {
		var _p21 = maybeToken;
		if (_p21.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(_elm_lang$core$Dict$get, _p21._0, tokens));
		}
	});
var _user$project$Indexer$emptyModuleDocs = {
	sourcePath: '',
	name: '',
	values: {
		aliases: _elm_lang$core$Native_List.fromArray(
			[]),
		tipes: _elm_lang$core$Native_List.fromArray(
			[]),
		values: _elm_lang$core$Native_List.fromArray(
			[])
	},
	comment: ''
};
var _user$project$Indexer$emptyModel = {
	packageDocs: _elm_lang$core$Native_List.fromArray(
		[]),
	fileContentsDict: _elm_lang$core$Dict$empty,
	activeTokens: _elm_lang$core$Dict$empty,
	activeHints: _elm_lang$core$Native_List.fromArray(
		[]),
	activeFile: _elm_lang$core$Maybe$Nothing
};
var _user$project$Indexer$activeTokenChangedSub = _elm_lang$core$Native_Platform.incomingPort(
	'activeTokenChangedSub',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
			])));
var _user$project$Indexer$activeFileChangedSub = _elm_lang$core$Native_Platform.incomingPort(
	'activeFileChangedSub',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Maybe$Just,
				A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(_elm_lang$core$Json_Decode_ops[':='], 'filePath', _elm_lang$core$Json_Decode$string),
					function (filePath) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							A2(_elm_lang$core$Json_Decode_ops[':='], 'projectDirectory', _elm_lang$core$Json_Decode$string),
							function (projectDirectory) {
								return _elm_lang$core$Json_Decode$succeed(
									{filePath: filePath, projectDirectory: projectDirectory});
							});
					}))
			])));
var _user$project$Indexer$fileContentsChangedSub = _elm_lang$core$Native_Platform.incomingPort(
	'fileContentsChangedSub',
	A4(
		_elm_lang$core$Json_Decode$tuple3,
		F3(
			function (x1, x2, x3) {
				return {ctor: '_Tuple3', _0: x1, _1: x2, _2: x3};
			}),
		_elm_lang$core$Json_Decode$string,
		A2(
			_elm_lang$core$Json_Decode$andThen,
			A2(_elm_lang$core$Json_Decode_ops[':='], 'sourcePath', _elm_lang$core$Json_Decode$string),
			function (sourcePath) {
				return A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
					function (name) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							A2(
								_elm_lang$core$Json_Decode_ops[':='],
								'values',
								A2(
									_elm_lang$core$Json_Decode$andThen,
									A2(
										_elm_lang$core$Json_Decode_ops[':='],
										'aliases',
										_elm_lang$core$Json_Decode$list(
											A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
												function (name) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
														function (comment) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'tipe', _elm_lang$core$Json_Decode$string),
																function (tipe) {
																	return _elm_lang$core$Json_Decode$succeed(
																		{name: name, comment: comment, tipe: tipe});
																});
														});
												}))),
									function (aliases) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											A2(
												_elm_lang$core$Json_Decode_ops[':='],
												'tipes',
												_elm_lang$core$Json_Decode$list(
													A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
														function (name) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
																function (comment) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		A2(_elm_lang$core$Json_Decode_ops[':='], 'tipe', _elm_lang$core$Json_Decode$string),
																		function (tipe) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				A2(
																					_elm_lang$core$Json_Decode_ops[':='],
																					'cases',
																					_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
																				function (cases) {
																					return _elm_lang$core$Json_Decode$succeed(
																						{name: name, comment: comment, tipe: tipe, cases: cases});
																				});
																		});
																});
														}))),
											function (tipes) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													A2(
														_elm_lang$core$Json_Decode_ops[':='],
														'values',
														_elm_lang$core$Json_Decode$list(
															A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
																function (name) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
																		function (comment) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				A2(_elm_lang$core$Json_Decode_ops[':='], 'tipe', _elm_lang$core$Json_Decode$string),
																				function (tipe) {
																					return _elm_lang$core$Json_Decode$succeed(
																						{name: name, comment: comment, tipe: tipe});
																				});
																		});
																}))),
													function (values) {
														return _elm_lang$core$Json_Decode$succeed(
															{aliases: aliases, tipes: tipes, values: values});
													});
											});
									})),
							function (values) {
								return A2(
									_elm_lang$core$Json_Decode$andThen,
									A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
									function (comment) {
										return _elm_lang$core$Json_Decode$succeed(
											{sourcePath: sourcePath, name: name, values: values, comment: comment});
									});
							});
					});
			}),
		_elm_lang$core$Json_Decode$list(
			A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
				function (name) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'alias',
							_elm_lang$core$Json_Decode$oneOf(
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
										A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
									]))),
						function (alias) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(
									_elm_lang$core$Json_Decode_ops[':='],
									'exposed',
									_elm_lang$core$Json_Decode$oneOf(
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
												A2(
												_elm_lang$core$Json_Decode$map,
												_elm_lang$core$Maybe$Just,
												_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))
											]))),
								function (exposed) {
									return _elm_lang$core$Json_Decode$succeed(
										{name: name, alias: alias, exposed: exposed});
								});
						});
				}))));
var _user$project$Indexer$fileContentsRemovedSub = _elm_lang$core$Native_Platform.incomingPort('fileContentsRemovedSub', _elm_lang$core$Json_Decode$string);
var _user$project$Indexer$newPackagesNeededSub = _elm_lang$core$Native_Platform.incomingPort(
	'newPackagesNeededSub',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
var _user$project$Indexer$goToDefinitionSub = _elm_lang$core$Native_Platform.incomingPort(
	'goToDefinitionSub',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
			])));
var _user$project$Indexer$goToSymbolSub = _elm_lang$core$Native_Platform.incomingPort(
	'goToSymbolSub',
	A3(
		_elm_lang$core$Json_Decode$tuple2,
		F2(
			function (x1, x2) {
				return {ctor: '_Tuple2', _0: x1, _1: x2};
			}),
		_elm_lang$core$Json_Decode$oneOf(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
				])),
		_elm_lang$core$Json_Decode$oneOf(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
				]))));
var _user$project$Indexer$getHintsForPartialSub = _elm_lang$core$Native_Platform.incomingPort('getHintsForPartialSub', _elm_lang$core$Json_Decode$string);
var _user$project$Indexer$getSuggestionsForImportSub = _elm_lang$core$Native_Platform.incomingPort('getSuggestionsForImportSub', _elm_lang$core$Json_Decode$string);
var _user$project$Indexer$askCanGoToDefinitionSub = _elm_lang$core$Native_Platform.incomingPort('askCanGoToDefinitionSub', _elm_lang$core$Json_Decode$string);
var _user$project$Indexer$docsLoadedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'docsLoadedCmd',
	function (v) {
		return null;
	});
var _user$project$Indexer$docsFailedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'docsFailedCmd',
	function (v) {
		return null;
	});
var _user$project$Indexer$goToDefinitionCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'goToDefinitionCmd',
	function (v) {
		return {
			sourcePath: v.sourcePath,
			name: v.name,
			caseTipe: (v.caseTipe.ctor === 'Nothing') ? null : v.caseTipe._0
		};
	});
var _user$project$Indexer$goToSymbolCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'goToSymbolCmd',
	function (v) {
		return [
			(v._0.ctor === 'Nothing') ? null : v._0._0,
			(v._1.ctor === 'Nothing') ? null : {filePath: v._1._0.filePath, projectDirectory: v._1._0.projectDirectory},
			_elm_lang$core$Native_List.toArray(v._2).map(
			function (v) {
				return {
					fullName: v.fullName,
					sourcePath: v.sourcePath,
					caseTipe: (v.caseTipe.ctor === 'Nothing') ? null : v.caseTipe._0,
					kind: v.kind
				};
			})
		];
	});
var _user$project$Indexer$activeFileChangedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'activeFileChangedCmd',
	function (v) {
		return (v.ctor === 'Nothing') ? null : {filePath: v._0.filePath, projectDirectory: v._0.projectDirectory};
	});
var _user$project$Indexer$activeHintsChangedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'activeHintsChangedCmd',
	function (v) {
		return _elm_lang$core$Native_List.toArray(v).map(
			function (v) {
				return {
					name: v.name,
					moduleName: v.moduleName,
					sourcePath: v.sourcePath,
					comment: v.comment,
					tipe: v.tipe,
					caseTipe: (v.caseTipe.ctor === 'Nothing') ? null : v.caseTipe._0,
					kind: v.kind
				};
			});
	});
var _user$project$Indexer$updatingPackageDocsCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'updatingPackageDocsCmd',
	function (v) {
		return null;
	});
var _user$project$Indexer$hintsForPartialReceivedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'hintsForPartialReceivedCmd',
	function (v) {
		return [
			v._0,
			_elm_lang$core$Native_List.toArray(v._1).map(
			function (v) {
				return {
					name: v.name,
					moduleName: v.moduleName,
					sourcePath: v.sourcePath,
					comment: v.comment,
					tipe: v.tipe,
					caseTipe: (v.caseTipe.ctor === 'Nothing') ? null : v.caseTipe._0,
					kind: v.kind
				};
			})
		];
	});
var _user$project$Indexer$suggestionsForImportReceivedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'suggestionsForImportReceivedCmd',
	function (v) {
		return [
			v._0,
			_elm_lang$core$Native_List.toArray(v._1).map(
			function (v) {
				return {name: v.name, comment: v.comment, sourcePath: v.sourcePath};
			})
		];
	});
var _user$project$Indexer$canGoToDefinitionRepliedCmd = _elm_lang$core$Native_Platform.outgoingPort(
	'canGoToDefinitionRepliedCmd',
	function (v) {
		return [v._0, v._1];
	});
var _user$project$Indexer$Model = F5(
	function (a, b, c, d, e) {
		return {packageDocs: a, fileContentsDict: b, activeTokens: c, activeHints: d, activeFile: e};
	});
var _user$project$Indexer$ActiveFile = F2(
	function (a, b) {
		return {filePath: a, projectDirectory: b};
	});
var _user$project$Indexer$FileContents = F2(
	function (a, b) {
		return {moduleDocs: a, imports: b};
	});
var _user$project$Indexer$GoToDefinitionRequest = F3(
	function (a, b, c) {
		return {sourcePath: a, name: b, caseTipe: c};
	});
var _user$project$Indexer$ModuleDocs = F4(
	function (a, b, c, d) {
		return {sourcePath: a, name: b, values: c, comment: d};
	});
var _user$project$Indexer$Values = F3(
	function (a, b, c) {
		return {aliases: a, tipes: b, values: c};
	});
var _user$project$Indexer$Tipe = F4(
	function (a, b, c, d) {
		return {name: a, comment: b, tipe: c, cases: d};
	});
var _user$project$Indexer$Value = F3(
	function (a, b, c) {
		return {name: a, comment: b, tipe: c};
	});
var _user$project$Indexer$moduleDecoder = function (packageUri) {
	var value = A4(
		_elm_lang$core$Json_Decode$object3,
		_user$project$Indexer$Value,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'type', _elm_lang$core$Json_Decode$string));
	var tipe = A5(
		_elm_lang$core$Json_Decode$object4,
		_user$project$Indexer$Tipe,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'cases',
			_elm_lang$core$Json_Decode$list(
				A3(_elm_lang$core$Json_Decode$tuple2, _elm_lang$core$Basics$always, _elm_lang$core$Json_Decode$string, _elm_lang$core$Json_Decode$value))));
	var values = A4(
		_elm_lang$core$Json_Decode$object3,
		_user$project$Indexer$Values,
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'aliases',
			_elm_lang$core$Json_Decode$list(value)),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'types',
			_elm_lang$core$Json_Decode$list(tipe)),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'values',
			_elm_lang$core$Json_Decode$list(value)));
	var name = A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string);
	return A4(
		_elm_lang$core$Json_Decode$object3,
		_user$project$Indexer$ModuleDocs(packageUri),
		name,
		values,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'comment', _elm_lang$core$Json_Decode$string));
};
var _user$project$Indexer$getPackageDocs = function (packageUri) {
	var url = A2(_elm_lang$core$Basics_ops['++'], packageUri, 'documentation.json');
	return A2(
		_evancz$elm_http$Http$get,
		_elm_lang$core$Json_Decode$list(
			_user$project$Indexer$moduleDecoder(packageUri)),
		url);
};
var _user$project$Indexer$getPackageDocsList = function (packageuris) {
	return A2(
		_elm_lang$core$Task$map,
		_elm_lang$core$List$concat,
		_elm_lang$core$Task$sequence(
			A2(_elm_lang$core$List$map, _user$project$Indexer$getPackageDocs, packageuris)));
};
var _user$project$Indexer$Symbol = F4(
	function (a, b, c, d) {
		return {fullName: a, sourcePath: b, caseTipe: c, kind: d};
	});
var _user$project$Indexer$EncodedSymbol = F4(
	function (a, b, c, d) {
		return {fullName: a, sourcePath: b, caseTipe: c, kind: d};
	});
var _user$project$Indexer$Hint = F7(
	function (a, b, c, d, e, f, g) {
		return {name: a, moduleName: b, sourcePath: c, comment: d, tipe: e, caseTipe: f, kind: g};
	});
var _user$project$Indexer$EncodedHint = F7(
	function (a, b, c, d, e, f, g) {
		return {name: a, moduleName: b, sourcePath: c, comment: d, tipe: e, caseTipe: f, kind: g};
	});
var _user$project$Indexer$ImportSuggestion = F3(
	function (a, b, c) {
		return {name: a, comment: b, sourcePath: c};
	});
var _user$project$Indexer$RawImport = F3(
	function (a, b, c) {
		return {name: a, alias: b, exposed: c};
	});
var _user$project$Indexer$Import = F2(
	function (a, b) {
		return {alias: a, exposed: b};
	});
var _user$project$Indexer_ops = _user$project$Indexer_ops || {};
_user$project$Indexer_ops['=>'] = F2(
	function (name, exposed) {
		return {
			ctor: '_Tuple2',
			_0: name,
			_1: A2(_user$project$Indexer$Import, _elm_lang$core$Maybe$Nothing, exposed)
		};
	});
var _user$project$Indexer$AskCanGoToDefinition = function (a) {
	return {ctor: 'AskCanGoToDefinition', _0: a};
};
var _user$project$Indexer$GetSuggestionsForImport = function (a) {
	return {ctor: 'GetSuggestionsForImport', _0: a};
};
var _user$project$Indexer$GetHintsForPartial = function (a) {
	return {ctor: 'GetHintsForPartial', _0: a};
};
var _user$project$Indexer$GoToSymbol = function (a) {
	return {ctor: 'GoToSymbol', _0: a};
};
var _user$project$Indexer$GoToDefinition = function (a) {
	return {ctor: 'GoToDefinition', _0: a};
};
var _user$project$Indexer$UpdatePackageDocs = function (a) {
	return {ctor: 'UpdatePackageDocs', _0: a};
};
var _user$project$Indexer$RemoveFileContents = function (a) {
	return {ctor: 'RemoveFileContents', _0: a};
};
var _user$project$Indexer$UpdateFileContents = F2(
	function (a, b) {
		return {ctor: 'UpdateFileContents', _0: a, _1: b};
	});
var _user$project$Indexer$UpdateActiveFile = function (a) {
	return {ctor: 'UpdateActiveFile', _0: a};
};
var _user$project$Indexer$CursorMove = function (a) {
	return {ctor: 'CursorMove', _0: a};
};
var _user$project$Indexer$DocsLoaded = function (a) {
	return {ctor: 'DocsLoaded', _0: a};
};
var _user$project$Indexer$DocsFailed = {ctor: 'DocsFailed'};
var _user$project$Indexer$init = {
	ctor: '_Tuple2',
	_0: _user$project$Indexer$emptyModel,
	_1: A3(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$always(_user$project$Indexer$DocsFailed),
		_user$project$Indexer$DocsLoaded,
		_user$project$Indexer$getPackageDocsList(_user$project$Indexer$defaultPackages))
};
var _user$project$Indexer$KindModule = {ctor: 'KindModule'};
var _user$project$Indexer$moduleToHints = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p27 = _p24.name;
		var _p25 = _p22;
		var hint = {name: _p27, moduleName: '', sourcePath: _p24.sourcePath, comment: _p24.comment, tipe: '', caseTipe: _elm_lang$core$Maybe$Nothing, kind: _user$project$Indexer$KindModule};
		var _p26 = _p25.alias;
		if (_p26.ctor === 'Nothing') {
			return _elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: _p27, _1: hint}
				]);
		} else {
			return _elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: _p27, _1: hint},
					{ctor: '_Tuple2', _0: _p26._0, _1: hint}
				]);
		}
	});
var _user$project$Indexer$KindTypeCase = {ctor: 'KindTypeCase'};
var _user$project$Indexer$unionTagsToHints = F3(
	function (moduleDocs, _p29, _p28) {
		var _p30 = _p29;
		var _p31 = _p28;
		var _p32 = _p31.name;
		var addHints = F2(
			function (tag, hints) {
				var localName = A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$Maybe$withDefault, moduleDocs.name, _p30.alias),
					A2(_elm_lang$core$Basics_ops['++'], '.', tag));
				var hint = {
					name: tag,
					moduleName: moduleDocs.name,
					sourcePath: A2(_user$project$Indexer$formatSourcePath, moduleDocs, _p32),
					comment: _p31.comment,
					tipe: _p31.tipe,
					caseTipe: _elm_lang$core$Maybe$Just(_p32),
					kind: _user$project$Indexer$KindTypeCase
				};
				var fullName = A2(
					_elm_lang$core$Basics_ops['++'],
					moduleDocs.name,
					A2(_elm_lang$core$Basics_ops['++'], '.', tag));
				return (A2(_elm_lang$core$Set$member, _p32, _user$project$Indexer$defaultTypes) || A2(_user$project$Indexer$isExposed, tag, _p30.exposed)) ? A2(
					_elm_lang$core$List_ops['::'],
					{ctor: '_Tuple2', _0: tag, _1: hint},
					A2(
						_elm_lang$core$List_ops['::'],
						{ctor: '_Tuple2', _0: localName, _1: hint},
						A2(
							_elm_lang$core$List_ops['::'],
							{ctor: '_Tuple2', _0: fullName, _1: hint},
							hints))) : A2(
					_elm_lang$core$List_ops['::'],
					{ctor: '_Tuple2', _0: localName, _1: hint},
					A2(
						_elm_lang$core$List_ops['::'],
						{ctor: '_Tuple2', _0: fullName, _1: hint},
						hints));
			});
		return A3(
			_elm_lang$core$List$foldl,
			addHints,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_p31.cases);
	});
var _user$project$Indexer$KindType = {ctor: 'KindType'};
var _user$project$Indexer$KindTypeAlias = {ctor: 'KindTypeAlias'};
var _user$project$Indexer$KindDefault = {ctor: 'KindDefault'};
var _user$project$Indexer$projectSymbols = F2(
	function (projectDirectory, fileContentsDict) {
		var allFileSymbols = function (fileContentsDict) {
			return A2(
				_elm_lang$core$List$concatMap,
				function (_p33) {
					var _p34 = _p33;
					var _p36 = _p34.moduleDocs;
					var _p35 = _p36;
					var sourcePath = _p35.sourcePath;
					var values = _p35.values;
					var moduleDocsSymbol = {fullName: _p36.name, sourcePath: sourcePath, caseTipe: _elm_lang$core$Maybe$Nothing, kind: _user$project$Indexer$KindModule};
					var valueSymbols = A2(
						_elm_lang$core$List$map,
						function (value) {
							var firstChar = A2(_elm_lang$core$String$left, 1, value.name);
							var kind = _elm_lang$core$Native_Utils.eq(
								firstChar,
								_elm_lang$core$String$toUpper(firstChar)) ? _user$project$Indexer$KindTypeAlias : _user$project$Indexer$KindDefault;
							return {
								fullName: A2(
									_elm_lang$core$Basics_ops['++'],
									_p36.name,
									A2(_elm_lang$core$Basics_ops['++'], '.', value.name)),
								sourcePath: A2(_user$project$Indexer$formatSourcePath, _p36, value.name),
								caseTipe: _elm_lang$core$Maybe$Nothing,
								kind: kind
							};
						},
						values.values);
					var tipeSymbols = A2(
						_elm_lang$core$List$map,
						function (tipe) {
							return {
								fullName: A2(
									_elm_lang$core$Basics_ops['++'],
									_p36.name,
									A2(_elm_lang$core$Basics_ops['++'], '.', tipe.name)),
								sourcePath: A2(_user$project$Indexer$formatSourcePath, _p36, tipe.name),
								caseTipe: _elm_lang$core$Maybe$Nothing,
								kind: _user$project$Indexer$KindType
							};
						},
						values.tipes);
					var tipeCaseSymbols = A2(
						_elm_lang$core$List$concatMap,
						function (tipe) {
							return A2(
								_elm_lang$core$List$map,
								function (caseName) {
									return {
										fullName: A2(
											_elm_lang$core$Basics_ops['++'],
											_p36.name,
											A2(_elm_lang$core$Basics_ops['++'], '.', caseName)),
										sourcePath: A2(_user$project$Indexer$formatSourcePath, _p36, caseName),
										caseTipe: _elm_lang$core$Maybe$Just(tipe.name),
										kind: _user$project$Indexer$KindTypeCase
									};
								},
								tipe.cases);
						},
						values.tipes);
					return A2(
						_elm_lang$core$Basics_ops['++'],
						valueSymbols,
						A2(
							_elm_lang$core$Basics_ops['++'],
							tipeSymbols,
							A2(
								_elm_lang$core$Basics_ops['++'],
								tipeCaseSymbols,
								_elm_lang$core$Native_List.fromArray(
									[moduleDocsSymbol]))));
				},
				_elm_lang$core$Dict$values(fileContentsDict));
		};
		return A2(
			_elm_lang$core$List$filter,
			function (_p37) {
				var _p38 = _p37;
				var _p39 = _p38.sourcePath;
				return _elm_lang$core$Basics$not(
					A2(_elm_lang$core$String$startsWith, _user$project$Indexer$packageDocsPrefix, _p39)) && A2(_user$project$Indexer$isSourcePathInProjectDirectory, projectDirectory, _p39);
			},
			allFileSymbols(fileContentsDict));
	});
var _user$project$Indexer$emptyHint = {name: '', moduleName: '', sourcePath: '', comment: '', tipe: '', caseTipe: _elm_lang$core$Maybe$Nothing, kind: _user$project$Indexer$KindDefault};
var _user$project$Indexer$filteredHints = F2(
	function (moduleDocs, importData) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$concatMap,
				A2(_user$project$Indexer$unionTagsToHints, moduleDocs, importData),
				moduleDocs.values.tipes),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$List$concatMap,
					A3(_user$project$Indexer$nameToHints, moduleDocs, importData, _user$project$Indexer$KindTypeAlias),
					moduleDocs.values.aliases),
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$concatMap,
						A3(_user$project$Indexer$nameToHints, moduleDocs, importData, _user$project$Indexer$KindType),
						A2(_elm_lang$core$List$map, _user$project$Indexer$tipeToValue, moduleDocs.values.tipes)),
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$concatMap,
							A3(_user$project$Indexer$nameToHints, moduleDocs, importData, _user$project$Indexer$KindDefault),
							moduleDocs.values.values),
						A2(_user$project$Indexer$moduleToHints, moduleDocs, importData)))));
	});
var _user$project$Indexer$All = {ctor: 'All'};
var _user$project$Indexer$Some = function (a) {
	return {ctor: 'Some', _0: a};
};
var _user$project$Indexer$None = {ctor: 'None'};
var _user$project$Indexer$toImport = function (_p40) {
	var _p41 = _p40;
	var exposedSet = function () {
		var _p42 = _p41.exposed;
		if (_p42.ctor === 'Nothing') {
			return _user$project$Indexer$None;
		} else {
			if (((_p42._0.ctor === '::') && (_p42._0._0 === '..')) && (_p42._0._1.ctor === '[]')) {
				return _user$project$Indexer$All;
			} else {
				return _user$project$Indexer$Some(
					_elm_lang$core$Set$fromList(_p42._0));
			}
		}
	}();
	return {
		ctor: '_Tuple2',
		_0: _p41.name,
		_1: A2(_user$project$Indexer$Import, _p41.alias, exposedSet)
	};
};
var _user$project$Indexer$defaultImports = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Indexer_ops['=>'], 'Basics', _user$project$Indexer$All),
			A2(_user$project$Indexer_ops['=>'], 'Debug', _user$project$Indexer$None),
			A2(
			_user$project$Indexer_ops['=>'],
			'List',
			_user$project$Indexer$Some(
				_elm_lang$core$Set$fromList(
					_elm_lang$core$Native_List.fromArray(
						['List', '::'])))),
			A2(
			_user$project$Indexer_ops['=>'],
			'Maybe',
			_user$project$Indexer$Some(
				_elm_lang$core$Set$singleton('Maybe'))),
			A2(
			_user$project$Indexer_ops['=>'],
			'Result',
			_user$project$Indexer$Some(
				_elm_lang$core$Set$singleton('Result'))),
			A2(
			_user$project$Indexer_ops['=>'],
			'Platform',
			_user$project$Indexer$Some(
				_elm_lang$core$Set$singleton('Program'))),
			{
			ctor: '_Tuple2',
			_0: 'Platform.Cmd',
			_1: A2(
				_user$project$Indexer$Import,
				_elm_lang$core$Maybe$Just('Cmd'),
				_user$project$Indexer$Some(
					_elm_lang$core$Set$fromList(
						_elm_lang$core$Native_List.fromArray(
							['Cmd', '!']))))
		},
			{
			ctor: '_Tuple2',
			_0: 'Platform.Sub',
			_1: A2(
				_user$project$Indexer$Import,
				_elm_lang$core$Maybe$Just('Sub'),
				_user$project$Indexer$Some(
					_elm_lang$core$Set$singleton('Sub')))
		}
		]));
var _user$project$Indexer$emptyFileContents = {moduleDocs: _user$project$Indexer$emptyModuleDocs, imports: _user$project$Indexer$defaultImports};
var _user$project$Indexer$activeFileContents = F2(
	function (activeFile, fileContentsDict) {
		var _p43 = activeFile;
		if (_p43.ctor === 'Nothing') {
			return _user$project$Indexer$emptyFileContents;
		} else {
			var _p44 = A2(_elm_lang$core$Dict$get, _p43._0.filePath, fileContentsDict);
			if (_p44.ctor === 'Just') {
				return _p44._0;
			} else {
				return _user$project$Indexer$emptyFileContents;
			}
		}
	});
var _user$project$Indexer$exposedHints = F3(
	function (activeFile, fileContentsDict, packageDocs) {
		var _p45 = activeFile;
		if (_p45.ctor === 'Nothing') {
			return _elm_lang$core$Set$empty;
		} else {
			var fileContents = A2(_user$project$Indexer$activeFileContents, activeFile, fileContentsDict);
			var importsPlusActiveModule = A3(
				_elm_lang$core$Dict$update,
				fileContents.moduleDocs.name,
				_elm_lang$core$Basics$always(
					_elm_lang$core$Maybe$Just(
						{alias: _elm_lang$core$Maybe$Nothing, exposed: _user$project$Indexer$All})),
				fileContents.imports);
			var importedModuleNames = _elm_lang$core$Dict$keys(importsPlusActiveModule);
			var importedModuleDocs = A2(
				_elm_lang$core$List$filter,
				function (moduleDocs) {
					return A2(_elm_lang$core$List$member, moduleDocs.name, importedModuleNames);
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					packageDocs,
					A2(_user$project$Indexer$projectModuleDocs, _p45._0.projectDirectory, fileContentsDict)));
			var imports = _elm_lang$core$Dict$values(importsPlusActiveModule);
			return _elm_lang$core$Set$fromList(
				A2(
					_elm_lang$core$List$concatMap,
					function (moduleDocs) {
						var exposed = function () {
							var _p46 = A2(_elm_lang$core$Dict$get, moduleDocs.name, importsPlusActiveModule);
							if (_p46.ctor === 'Nothing') {
								return _user$project$Indexer$None;
							} else {
								return _p46._0.exposed;
							}
						}();
						return A2(
							_elm_lang$core$List$map,
							function (name) {
								return {ctor: '_Tuple2', _0: moduleDocs.name, _1: name};
							},
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$List$map,
									function (_) {
										return _.name;
									},
									A2(
										_elm_lang$core$List$filter,
										function (_p47) {
											var _p48 = _p47;
											return A2(_user$project$Indexer$isExposed, _p48.name, exposed);
										},
										A2(
											_elm_lang$core$Basics_ops['++'],
											moduleDocs.values.aliases,
											A2(
												_elm_lang$core$Basics_ops['++'],
												A2(_elm_lang$core$List$map, _user$project$Indexer$tipeToValue, moduleDocs.values.tipes),
												moduleDocs.values.values)))),
								A2(
									_elm_lang$core$List$concatMap,
									function (_p49) {
										var _p50 = _p49;
										return A2(
											_elm_lang$core$List$filter,
											function (kase) {
												return A2(_elm_lang$core$Set$member, _p50.name, _user$project$Indexer$defaultTypes) || A2(_user$project$Indexer$isExposed, kase, exposed);
											},
											_p50.cases);
									},
									moduleDocs.values.tipes)));
					},
					importedModuleDocs));
		}
	});
var _user$project$Indexer$hintsForPartial = F5(
	function (partial, activeFile, fileContentsDict, packageDocs, tokens) {
		var fileContents = A2(_user$project$Indexer$activeFileContents, activeFile, fileContentsDict);
		var importAliases = A2(
			_elm_lang$core$List$filterMap,
			function (_p51) {
				var _p52 = _p51;
				var _p53 = _p52.alias;
				if (_p53.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var _p54 = _p53._0;
					return A2(_elm_lang$core$String$startsWith, partial, _p54) ? _elm_lang$core$Maybe$Just(
						_elm_lang$core$Native_Utils.update(
							_user$project$Indexer$emptyHint,
							{name: _p54})) : _elm_lang$core$Maybe$Nothing;
				}
			},
			_elm_lang$core$Dict$values(fileContents.imports));
		var exposedSet = A3(_user$project$Indexer$exposedHints, activeFile, fileContentsDict, packageDocs);
		var exposedNames = A2(_elm_lang$core$Set$map, _elm_lang$core$Basics$snd, exposedSet);
		var hints = A2(
			_elm_lang$core$List$filterMap,
			function (hint) {
				var include = (_elm_lang$core$Native_Utils.eq(hint.moduleName, '') || A2(
					_elm_lang$core$Set$member,
					{ctor: '_Tuple2', _0: hint.moduleName, _1: hint.name},
					exposedSet)) ? A2(_elm_lang$core$String$startsWith, partial, hint.name) : true;
				if (_elm_lang$core$Basics$not(include)) {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					var nameToShow = function () {
						if (_elm_lang$core$Native_Utils.eq(hint.moduleName, '')) {
							return hint.name;
						} else {
							if (A2(
								_elm_lang$core$Set$member,
								{ctor: '_Tuple2', _0: hint.moduleName, _1: hint.name},
								exposedSet)) {
								return hint.name;
							} else {
								var moduleNamePrefix = function () {
									var _p55 = A2(_elm_lang$core$Dict$get, hint.moduleName, fileContents.imports);
									if (_p55.ctor === 'Nothing') {
										return '';
									} else {
										var _p56 = _p55._0.alias;
										if (_p56.ctor === 'Nothing') {
											return A2(_elm_lang$core$Basics_ops['++'], hint.moduleName, '.');
										} else {
											return A2(_elm_lang$core$Basics_ops['++'], _p56._0, '.');
										}
									}
								}();
								return A2(_elm_lang$core$Basics_ops['++'], moduleNamePrefix, hint.name);
							}
						}
					}();
					var moduleNameToShow = (_elm_lang$core$Native_Utils.eq(hint.moduleName, '') || _elm_lang$core$Native_Utils.eq(fileContents.moduleDocs.name, hint.moduleName)) ? '' : hint.moduleName;
					return _elm_lang$core$Maybe$Just(
						_elm_lang$core$Native_Utils.update(
							hint,
							{name: nameToShow, moduleName: moduleNameToShow}));
				}
			},
			A2(
				_elm_lang$core$List$concatMap,
				_elm_lang$core$Basics$identity,
				_elm_lang$core$Dict$values(
					A2(
						_elm_lang$core$Dict$filter,
						F2(
							function (token, _p57) {
								return A2(
									_elm_lang$core$Set$member,
									_user$project$Indexer$lastName(token),
									exposedNames) ? (A2(
									_elm_lang$core$String$startsWith,
									partial,
									_user$project$Indexer$lastName(token)) || A2(_elm_lang$core$String$startsWith, partial, token)) : A2(_elm_lang$core$String$startsWith, partial, token);
							}),
						tokens))));
		return A2(
			_elm_lang$core$List$sortBy,
			function (_) {
				return _.name;
			},
			A2(_elm_lang$core$Basics_ops['++'], importAliases, hints));
	});
var _user$project$Indexer$toTokenDict = F3(
	function (activeFile, fileContentsDict, packageDocsList) {
		var fileContents = A2(_user$project$Indexer$activeFileContents, activeFile, fileContentsDict);
		var _p58 = activeFile;
		if (_p58.ctor === 'Nothing') {
			return _elm_lang$core$Dict$empty;
		} else {
			var insert = F2(
				function (_p59, dict) {
					var _p60 = _p59;
					return A3(
						_elm_lang$core$Dict$update,
						_p60._0,
						function (value) {
							return _elm_lang$core$Maybe$Just(
								A2(
									_elm_lang$core$List_ops['::'],
									_p60._1,
									A2(
										_elm_lang$core$Maybe$withDefault,
										_elm_lang$core$Native_List.fromArray(
											[]),
										value)));
						},
						dict);
				});
			var importsPlusActiveModule = A3(
				_elm_lang$core$Dict$update,
				fileContents.moduleDocs.name,
				_elm_lang$core$Basics$always(
					_elm_lang$core$Maybe$Just(
						{alias: _elm_lang$core$Maybe$Nothing, exposed: _user$project$Indexer$All})),
				fileContents.imports);
			var getMaybeHints = function (moduleDocs) {
				return A2(
					_elm_lang$core$Maybe$map,
					_user$project$Indexer$filteredHints(moduleDocs),
					A2(_elm_lang$core$Dict$get, moduleDocs.name, importsPlusActiveModule));
			};
			return A3(
				_elm_lang$core$List$foldl,
				insert,
				_elm_lang$core$Dict$empty,
				_elm_lang$core$List$concat(
					A2(
						_elm_lang$core$List$filterMap,
						getMaybeHints,
						A2(
							_elm_lang$core$Basics_ops['++'],
							packageDocsList,
							A2(_user$project$Indexer$projectModuleDocs, _p58._0.projectDirectory, fileContentsDict)))));
		}
	});
var _user$project$Indexer$update = F2(
	function (msg, model) {
		var _p61 = msg;
		switch (_p61.ctor) {
			case 'DocsFailed':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Indexer$docsFailedCmd(
						{ctor: '_Tuple0'})
				};
			case 'DocsLoaded':
				var truncateComment = function (moduleDocs) {
					var truncatedComment = function () {
						var _p62 = _elm_lang$core$List$head(
							A2(_elm_lang$core$String$split, '\n\n', moduleDocs.comment));
						if (_p62.ctor === 'Nothing') {
							return '';
						} else {
							return _p62._0;
						}
					}();
					return _elm_lang$core$Native_Utils.update(
						moduleDocs,
						{comment: truncatedComment});
				};
				var existingPackages = A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.sourcePath;
					},
					model.packageDocs);
				var missingPackageDocs = A2(
					_elm_lang$core$List$filter,
					function (_p63) {
						var _p64 = _p63;
						return _elm_lang$core$Basics$not(
							A2(_elm_lang$core$List$member, _p64.sourcePath, existingPackages));
					},
					_p61._0);
				var updatedPackageDocs = A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$map, truncateComment, missingPackageDocs),
					model.packageDocs);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							packageDocs: updatedPackageDocs,
							activeTokens: A3(_user$project$Indexer$toTokenDict, model.activeFile, model.fileContentsDict, updatedPackageDocs)
						}),
					_1: _user$project$Indexer$docsLoadedCmd(
						{ctor: '_Tuple0'})
				};
			case 'CursorMove':
				var updatedActiveHints = A2(_user$project$Indexer$hintsForToken, _p61._0, model.activeTokens);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{activeHints: updatedActiveHints}),
					_1: _user$project$Indexer$activeHintsChangedCmd(
						A2(_elm_lang$core$List$map, _user$project$Indexer$encodeHint, updatedActiveHints))
				};
			case 'UpdateActiveFile':
				var _p65 = _p61._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							activeFile: _p65,
							activeTokens: A3(_user$project$Indexer$toTokenDict, _p65, model.fileContentsDict, model.packageDocs)
						}),
					_1: _user$project$Indexer$activeFileChangedCmd(_p65)
				};
			case 'UpdateFileContents':
				var updatedFileContentsDict = A3(
					_elm_lang$core$Dict$update,
					_p61._0,
					_elm_lang$core$Basics$always(
						_elm_lang$core$Maybe$Just(_p61._1)),
					model.fileContentsDict);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							fileContentsDict: updatedFileContentsDict,
							activeTokens: A3(_user$project$Indexer$toTokenDict, model.activeFile, updatedFileContentsDict, model.packageDocs)
						}),
					_1: _user$project$Indexer$activeFileChangedCmd(model.activeFile)
				};
			case 'RemoveFileContents':
				var updatedFileContentsDict = A2(_elm_lang$core$Dict$remove, _p61._0, model.fileContentsDict);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							fileContentsDict: updatedFileContentsDict,
							activeTokens: A3(_user$project$Indexer$toTokenDict, model.activeFile, updatedFileContentsDict, model.packageDocs)
						}),
					_1: _user$project$Indexer$activeFileChangedCmd(model.activeFile)
				};
			case 'UpdatePackageDocs':
				var existingPackages = A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.sourcePath;
					},
					model.packageDocs);
				var missingPackages = A2(
					_elm_lang$core$List$filter,
					function (sourcePath) {
						return _elm_lang$core$Basics$not(
							A2(_elm_lang$core$List$member, sourcePath, existingPackages));
					},
					A2(_elm_lang$core$List$map, _user$project$Indexer$toPackageUri, _p61._0));
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$batch(
						_elm_lang$core$Native_List.fromArray(
							[
								_user$project$Indexer$updatingPackageDocsCmd(
								{ctor: '_Tuple0'}),
								A3(
								_elm_lang$core$Task$perform,
								_elm_lang$core$Basics$always(_user$project$Indexer$DocsFailed),
								_user$project$Indexer$DocsLoaded,
								_user$project$Indexer$getPackageDocsList(missingPackages))
							]))
				};
			case 'GoToDefinition':
				var requests = A2(
					_elm_lang$core$List$map,
					function (hint) {
						return _user$project$Indexer$goToDefinitionCmd(
							A3(
								_user$project$Indexer$GoToDefinitionRequest,
								hint.sourcePath,
								_user$project$Indexer$lastName(hint.name),
								hint.caseTipe));
					},
					A2(_user$project$Indexer$hintsForToken, _p61._0, model.activeTokens));
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$core$Platform_Cmd$batch(requests)
				};
			case 'GoToSymbol':
				var _p70 = _p61._0._1;
				var _p66 = _p61._0._0;
				if (_p66.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var hints = A2(_user$project$Indexer$hintsForToken, _p70, model.activeTokens);
					var defaultSymbolName = function () {
						var _p67 = _elm_lang$core$List$head(hints);
						if (_p67.ctor === 'Nothing') {
							return _p70;
						} else {
							var _p69 = _p67._0;
							var _p68 = model.activeFile;
							if (_p68.ctor === 'Nothing') {
								return _elm_lang$core$Maybe$Just(_p69.name);
							} else {
								return _elm_lang$core$Native_Utils.eq(_p68._0.filePath, _p69.sourcePath) ? _elm_lang$core$Maybe$Just(
									_user$project$Indexer$lastName(_p69.name)) : _elm_lang$core$Maybe$Just(_p69.name);
							}
						}
					}();
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$Indexer$goToSymbolCmd(
							{
								ctor: '_Tuple3',
								_0: defaultSymbolName,
								_1: model.activeFile,
								_2: A2(
									_elm_lang$core$List$map,
									_user$project$Indexer$encodeSymbol,
									A2(_user$project$Indexer$projectSymbols, _p66._0, model.fileContentsDict))
							})
					};
				}
			case 'GetHintsForPartial':
				var _p71 = _p61._0;
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Indexer$hintsForPartialReceivedCmd(
						{
							ctor: '_Tuple2',
							_0: _p71,
							_1: A2(
								_elm_lang$core$List$map,
								_user$project$Indexer$encodeHint,
								A5(_user$project$Indexer$hintsForPartial, _p71, model.activeFile, model.fileContentsDict, model.packageDocs, model.activeTokens))
						})
				};
			case 'GetSuggestionsForImport':
				var _p72 = _p61._0;
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Indexer$suggestionsForImportReceivedCmd(
						{
							ctor: '_Tuple2',
							_0: _p72,
							_1: A4(_user$project$Indexer$suggestionsForImport, _p72, model.activeFile, model.fileContentsDict, model.packageDocs)
						})
				};
			default:
				var _p73 = _p61._0;
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Indexer$canGoToDefinitionRepliedCmd(
						{
							ctor: '_Tuple2',
							_0: _p73,
							_1: A2(_elm_lang$core$Dict$member, _p73, model.activeTokens)
						})
				};
		}
	});
var _user$project$Indexer$toImportDict = function (rawImports) {
	return A2(
		_elm_lang$core$Dict$union,
		_elm_lang$core$Dict$fromList(
			A2(_elm_lang$core$List$map, _user$project$Indexer$toImport, rawImports)),
		_user$project$Indexer$defaultImports);
};
var _user$project$Indexer$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Indexer$activeTokenChangedSub(_user$project$Indexer$CursorMove),
				_user$project$Indexer$activeFileChangedSub(_user$project$Indexer$UpdateActiveFile),
				_user$project$Indexer$fileContentsChangedSub(
				function (_p74) {
					var _p75 = _p74;
					return A2(
						_user$project$Indexer$UpdateFileContents,
						_p75._0,
						A2(
							_user$project$Indexer$FileContents,
							_p75._1,
							_user$project$Indexer$toImportDict(_p75._2)));
				}),
				_user$project$Indexer$fileContentsRemovedSub(_user$project$Indexer$RemoveFileContents),
				_user$project$Indexer$newPackagesNeededSub(_user$project$Indexer$UpdatePackageDocs),
				_user$project$Indexer$goToDefinitionSub(_user$project$Indexer$GoToDefinition),
				_user$project$Indexer$goToSymbolSub(_user$project$Indexer$GoToSymbol),
				_user$project$Indexer$getHintsForPartialSub(_user$project$Indexer$GetHintsForPartial),
				_user$project$Indexer$getSuggestionsForImportSub(_user$project$Indexer$GetSuggestionsForImport),
				_user$project$Indexer$askCanGoToDefinitionSub(_user$project$Indexer$AskCanGoToDefinition)
			]));
};
var _user$project$Indexer$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: _user$project$Indexer$init,
			view: function (_p76) {
				return A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[]));
			},
			update: _user$project$Indexer$update,
			subscriptions: _user$project$Indexer$subscriptions
		})
};
